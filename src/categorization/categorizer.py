import json
import re
from datetime import datetime as dt
from openai import OpenAI, AsyncOpenAI
import os
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

def extract_assistant_response(raw_output, prompt):
        """
        Extract the security vulnerability information and format it as proper JSON
        regardless of how the LLM formats its output.
        """
        # Remove the original prompt if it's included
        if prompt in raw_output:
            response = raw_output.split(prompt, 1)[1]
        else:
            response = raw_output
        
        # Handle chat model markers
        if "<|assistant|>" in response:
            response = response.split("<|assistant|>", 1)[1].strip()
        elif "\n<|assistant|>\n" in response:
            response = response.split("\n<|assistant|>\n", 1)[1].strip()
        
        # Remove trailing tokens
        for end_token in ["</s>", "<|endoftext|>"]:
            if end_token in response:
                response = response.split(end_token, 1)[0].strip()
        
        # Initialize the structure we want to extract
        result = {
            "cwe_category": "Unknown",
            "explanation": "",
            "cause": "",
            "impact": ""
        }
        
        # Find CWE ID
        cwe_match = re.search(r'CWE[- ](\d+)', response)
        if cwe_match:
            result["cwe_category"] = f"CWE-{cwe_match.group(1)}"
        
        # Find Vendor
        vendor_match = re.search(r'(?:Vendor|vendor)[:\s]+([^:\n]+)', response)
        if vendor_match:
            result["vendor"] = vendor_match.group(1).strip()
        
        # Find Cause
        cause_match = re.search(r'(?:Cause|cause)[:\s]+([^\n]+(?:\n[^A-Z][^\n]+)*)', response)
        if cause_match:
            result["cause"] = cause_match.group(1).strip()
        
        # Find Impact
        impact_match = re.search(r'(?:Impact|impact)[:\s]+([^\n]+(?:\n[^A-Z][^\n]+)*)', response)
        if impact_match:
            result["impact"] = impact_match.group(1).strip()
        
        # Extract explanation - if not explicitly found, use the vulnerability description
        explanation_match = re.search(r'(?:Explanation|explanation|Vulnerability Description)[:\s]+([^\n]+(?:\n[^A-Z][^\n]+)*)', response)
        if explanation_match:
            result["explanation"] = explanation_match.group(1).strip()
        elif "explanation" in response.lower():
            # Try to extract text after "explanation:"
            parts = response.lower().split("explanation:", 1)
            if len(parts) > 1:
                explanation_text = parts[1].split("\n", 1)[0].strip()
                result["explanation"] = explanation_text
        
        # If no separate explanation was found, try to use the description from the prompt
        if not result["explanation"]:
            description_match = re.search(r'Description:\s*```\s*(.*?)\s*```', prompt, re.DOTALL)
            if description_match:
                result["explanation"] = description_match.group(1).strip()
        
        # Clean up any values
        for key in result:
            if isinstance(result[key], str):
                # Remove multiple spaces
                result[key] = re.sub(r'\s+', ' ', result[key]).strip()
                # Remove any remaining backticks
                result[key] = result[key].replace('`', '')
        
        return result

def _extract_category(text_part):
    """Extract JSON from AI response text."""
    # Remove any non-JSON text after the JSON block
    text_part = text_part.split('\n\nExplanation:')[0].strip()
    
    # Try to extract JSON with or without backticks
    patterns = [
        r'```json\s*(\{[\s\S]*?\})\s*```',  # JSON with backticks
        r'\{[\s\S]*?\}'                      # Raw JSON
    ]
    
    for pattern in patterns:
        matches = re.finditer(pattern, text_part, re.DOTALL)
        for match in matches:
            try:
                json_str = match.group(1) if '```' in pattern else match.group(0)
                json_str = json_str.strip()
                result = json.loads(json_str)
                
                # Return structured result if all required fields are present
                if all(k in result for k in ["cwe_category", "explanation", "vendor", "cause", "impact"]):
                    return {
                        "cwe_category": result["cwe_category"],
                        "explanation": result["explanation"],
                        "vendor": result["vendor"],
                        "cause": result["cause"],
                        "impact": result["impact"]
                    }
            except json.JSONDecodeError:
                continue
    
    return {
        "cwe_category": "UNKNOWN",
        "explanation": "",
        "vendor": "Unknown",
        "cause": "",
        "impact": ""
    }

class Categorizer:
    def __init__(self):
        pass


    async def categorize_vulnerability_provider(self, description):
        api_key = os.getenv('PROVIDER_API_KEY')
        base_url = os.getenv('PROVIDER_API_URL')
        model = os.getenv('PROVIDER_API_MODEL')
        type = os.getenv("PROVIDER_TYPE")
        config = os.getenv("PROVIDER_CONFIG")
                  
        prompt = f"""
            You are a security expert.
            Categorize the following vulnerability description into a CWE category, identify the vendor, and extract the cause and impact of the vulnerability.
            Provide the CWE ID (only the CWE ID of the vulnerability), a brief explanation, the vendor name, the cause of the vulnerability, and its impact.

            Description:
            ```
            {description}
            ```
            Conform 'NVD CWE List' available for Classification:
                CWE-ID: name - description - examples - keywords
                CWE-843: Access of Resource Using Incompatible Type ('Type Confusion') - The program allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type. - examples: "Casting a base class pointer to a derived class pointer of an unrelated type and accessing members, Using a C-style cast on a void pointer to an incorrect data structure, Interpreting raw byte buffer as a complex object of the wrong class." - keywords: "type confusion, incompatible type, resource access, type mismatch, memory corruption, pointer casting, object misinterpretation"
                CWE-824: Access of Uninitialized Pointer - The program accesses or uses a pointer that has not been initialized. - examples: "Dereferencing a pointer immediately after declaration without assignment, Using a pointer returned by a function that might be NULL without checking, Accessing a class member pointer that was not initialized in the constructor." - keywords: "uninitialized pointer, null pointer, memory access, crash, segmentation fault, dangling pointer, undefined behavior"
                CWE-770: Allocation of Resources Without Limits or Throttling - The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor. - examples: "Allowing users to request an unlimited number of session objects, Processing an XML file that can define an excessive number of entities leading to memory exhaustion, A loop that allocates memory based on user input without a size cap." - keywords: "resource allocation, unlimited allocation, denial of service, DoS, resource exhaustion, throttling, rate limiting, memory bloat"
                CWE-670: Always-Incorrect Control Flow Implementation - The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated. - examples: "An 'if' condition that is always true or always false due to a logical error, A loop that always exits after the first iteration or never terminates as intended, Incorrectly ordered conditional checks leading to unreachable code blocks." - keywords: "control flow, logic error, incorrect path, flawed algorithm, bug, unexpected behavior, dead code, unreachable code"
                CWE-294: Authentication Bypass by Capture-replay - A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes). - examples: "Replaying a captured login request containing session cookies, Re-submitting a previously captured financial transaction request, Using nonces or timestamps improperly allowing old messages to be accepted." - keywords: "authentication bypass, capture-replay, replay attack, session hijacking, network sniffing, man-in-the-middle, nonces, message freshness"
                CWE-290: Authentication Bypass by Spoofing - This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks. - examples: "Accepting user identity based solely on a user-controlled HTTP header (e.g., X-Forwarded-For), Trusting an IP address for authentication without further checks, An API that allows a user to specify another user's ID in a request to act as them." - keywords: "authentication bypass, spoofing, identity theft, impersonation, weak authentication, IP spoofing, request forgery"
                CWE-639: Authorization Bypass Through User-Controlled Key - The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data. - examples: "Accessing '/user_profile?id=123' and changing 'id' to '456' to view another user's profile, An API endpoint like '/api/orders/order_id' where changing order_id gives access to others' orders, Modifying a hidden form field containing a record identifier." - keywords: "authorization bypass, user-controlled key, insecure direct object reference, IDOR, access control, privilege escalation, parameter tampering"
                CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') - The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow. - examples: "Using strcpy() to copy user-provided string into a fixed-size buffer, Using sprintf() with user input without validating length, Reading network data into a buffer using recv() without checking the amount of data received against buffer capacity." - keywords: "buffer overflow, classic buffer overflow, memory corruption, input size, bounds checking, strcpy, gets, sprintf, stack overflow"
                CWE-312: Cleartext Storage of Sensitive Information - The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere. - examples: "Storing user passwords in a database column as plain text, Writing API keys to a configuration file without encryption, Logging credit card numbers to a local file." - keywords: "cleartext storage, sensitive data, unencrypted, plain text, data exposure, password storage, confidentiality, PII"
                CWE-319: Cleartext Transmission of Sensitive Information - The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. - examples: "Transmitting login credentials over HTTP instead of HTTPS, Sending API keys in URLs over unencrypted channels, Emailing unencrypted sensitive documents." - keywords: "cleartext transmission, sensitive data, unencrypted, plain text, network sniffing, man-in-the-middle, data exposure, http, insecure transport"
                CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') - The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently. - examples: "Two threads incrementing a shared counter without locks (read-modify-write), Checking if a file exists then writing to it without locking, leading to another process deleting it in between, Modifying a shared data structure from multiple threads without mutexes." - keywords: "race condition, concurrency, shared resource, improper synchronization, threading, deadlock, atomicity, mutual exclusion"
                CWE-352: Cross-Site Request Forgery (CSRF) - The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request. - examples: "A web application performs a state-changing action (e.g., password change) based on a GET request without tokens, A malicious site causes a user's browser to submit a form to a vulnerable site where the user is authenticated, Lack of anti-CSRF tokens in forms that perform sensitive actions." - keywords: "CSRF, cross-site request forgery, session riding, one-click attack, request validation, anti-csrf token, state-changing request"
                CWE-502: Deserialization of Untrusted Data - The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid. - examples: "Deserializing a Java object from an HTTP request without validating the object's class or contents, Using Python's pickle.loads() on data received from an untrusted network source, Processing serialized user preferences that can be manipulated to execute arbitrary code." - keywords: "deserialization, untrusted data, object injection, remote code execution, insecure deserialization, data validation, code execution, gadget chains"
                CWE-425: Direct Request ('Forced Browsing') - The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files. - examples: "Accessing an admin page like /admin/dashboard.php by directly typing the URL without being an admin, Discovering unlinked backup files like config.bak by guessing filenames, Navigating to internal API endpoints that are not meant for public access." - keywords: "forced browsing, direct request, authorization bypass, access control, URL manipulation, hidden files, insecure endpoint"
                CWE-369: Divide By Zero - The product divides a value by zero. - examples: "Calculating an average where the count of items can be zero, A mathematical formula where a denominator is derived from user input that could be zero, An offset calculation x / y where y is not checked for zero." - keywords: "divide by zero, arithmetic error, exception, crash, denial of service, runtime error"
                CWE-415: Double Free - The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. - examples: "Freeing a pointer in a main function and also in a cleanup function for the same pointer, An error handling path frees a resource that is also freed in a standard exit path, Complex data structures where multiple parts might hold and try to free the same pointer." - keywords: "double free, memory corruption, heap corruption, use after free, memory management, pointer management"
                CWE-494: Download of Code Without Integrity Check - The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code. - examples: "An auto-update mechanism that downloads and runs an installer without checking its digital signature, A plugin system that loads remote scripts without validating their source or hash, Executing code fetched via HTTP without HTTPS or signature verification." - keywords: "code download, integrity check, code signing, supply chain attack, untrusted code, malware, remote code execution, signature verification"
                CWE-834: Excessive Iteration - The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed. - examples: "A while loop whose condition depends on external input that can prevent termination, A for loop processing elements of a list where the list can be excessively large due to user input, Recursive function calls without a proper base case or depth limit based on untrusted data." - keywords: "excessive iteration, infinite loop, denial of service, DoS, resource exhaustion, loop control, CPU usage, hang"
                CWE-668: Exposure of Resource to Wrong Sphere - The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource. - examples: "A web server configured to serve files from outside the web root, An internal administrative API endpoint made accessible from the public internet, Sharing an internal database connection string with a client-side application." - keywords: "resource exposure, wrong sphere, access control, information disclosure, unintended access, permissions, network misconfiguration"
                CWE-200: Exposure of Sensitive Information to an Unauthorized Actor - The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information. - examples: "Error messages revealing system paths or database structure, API responses including excessive user data not needed by the client, Directory listings enabled on a web server showing sensitive files." - keywords: "sensitive information exposure, data leak, information disclosure, unauthorized access, confidentiality breach, verbose errors, PII"
                CWE-610: Externally Controlled Reference to a Resource in Another Sphere - The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere. - examples: "A file inclusion vulnerability where user input specifies a path to /etc/passwd, An SSRF flaw where a user-provided URL is fetched by the server, A system call that takes a filename controlled by a low-privilege user." - keywords: "external control, resource reference, path traversal, file inclusion, SSRF, out-of-sphere, LFI, RFI"
                CWE-552: Files or Directories Accessible to External Parties - The product makes files or directories accessible to unauthorized actors, even though they should not be. - examples: "Web server misconfiguration allowing listing of directories containing sensitive files, Backup files (.bak, .old) left in web-accessible directories, Overly permissive file system ACLs on critical system files." - keywords: "file access, directory access, insecure permissions, information disclosure, unauthorized access, data exposure, web server misconfiguration"
                CWE-209: Generation of Error Message Containing Sensitive Information - The software generates an error message that includes sensitive information about its environment, users, or associated data. - examples: "Displaying full SQL query errors to users, Revealing internal IP addresses or server names in error pages, Exposing stack traces that detail application structure." - keywords: "error message, sensitive information, information disclosure, debugging information, verbose errors, stack trace, configuration details"
                CWE-287: Improper Authentication - When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct. - examples: "Allowing access based on a user-supplied 'isAdmin=true' parameter, Using easily guessable default credentials, Authenticating users solely based on their IP address in a shared network." - keywords: "improper authentication, weak authentication, authentication bypass, no authentication, identity verification, credential management"
                CWE-295: Improper Certificate Validation - The software does not validate, or incorrectly validates, a certificate. - examples: "Accepting self-signed SSL/TLS certificates without warning, Not checking certificate expiration or revocation status, Disabling hostname verification in an HTTPS client." - keywords: "certificate validation, SSL/TLS, man-in-the-middle, insecure communication, trust, HTTPS, PKI, hostname verification"
                CWE-273: Improper Check for Dropped Privileges - The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded. - examples: "Calling setuid() to drop root privileges but not verifying the return code, Continuing execution with elevated privileges after a failed privilege drop attempt, Performing sensitive operations assuming privileges were dropped when they weren't." - keywords: "dropped privileges, privilege escalation, permission check, root access, least privilege, setuid, effective UID"
                CWE-754: Improper Check for Unusual or Exceptional Conditions - The software does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software. - examples: "Ignoring return values from functions that indicate errors, Not handling potential null values before dereferencing, Failing to catch specific exceptions that could lead to application instability." - keywords: "exceptional conditions, error handling, unexpected input, robustness, edge cases, return value check, null check"
                CWE-913: Improper Control of Dynamically-Managed Code Resources - The software does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements. - examples: "Allowing user input to specify class names for instantiation via reflection without validation, Modifying JavaScript prototypes based on URL parameters, Using eval() on untrusted strings that can alter program logic." - keywords: "dynamic code, code modification, reflection, runtime manipulation, insecure code management, eval, prototype pollution"
                CWE-94: Improper Control of Generation of Code ('Code Injection') - The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. - examples: "Using eval() on concatenated strings including user input, Server-side template injection where user input becomes part of the template code, Generating shell commands by embedding unsanitized user data." - keywords: "code injection, eval injection, dynamic code, input sanitization, remote code execution, template injection, command injection"
                CWE-116: Improper Encoding or Escaping of Output - The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved. - examples: "Outputting user-supplied data directly into an HTML page without HTML entity encoding (leading to XSS), Generating JSON with unescaped user input that breaks the JSON structure, Logging user data without sanitizing control characters that could corrupt log parsing." - keywords: "output encoding, output escaping, XSS, injection, data sanitization, context awareness, HTML injection, log injection"
                CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel - The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission. - examples: "Relying on unencrypted HTTP for API communication without message authentication codes (MACs), Downloading software updates over an insecure channel without verifying a digital signature, Not using TLS or using it with weak cipher suites that don't ensure integrity." - keywords: "message integrity, data tampering, man-in-the-middle, checksum, MAC, digital signature, insecure communication, HMAC"
                CWE-178: Improper Handling of Case Sensitivity - The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results. - examples: "Allowing 'admin' and 'Admin' as different usernames but file system is case-insensitive, Checking for 'file.txt' but attacker uploads 'File.TXT' on a case-insensitive OS, Inconsistent case handling in security checks for URLs or parameters." - keywords: "case sensitivity, normalization, canonicalization, resource access, file system, identifier comparison, username enumeration"
                CWE-755: Improper Handling of Exceptional Conditions - The software does not handle or incorrectly handles an exceptional condition. - examples: "A try block with an empty catch block that silently ignores errors, Catching a generic Exception and not taking appropriate action, Allowing an unhandled exception to propagate and crash the application." - keywords: "exception handling, error handling, crash, denial of service, unexpected state, robustness, unhandled exception"
                CWE-665: Improper Initialization - The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used. - examples: "Using a variable before it's assigned a value, A class constructor not initializing all member variables, Forgetting to initialize a security-critical flag to a safe default." - keywords: "improper initialization, uninitialized variable, default values, resource state, unexpected behavior, null pointer, undefined state"
                CWE-20: Improper Input Validation - The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. - examples: "Accepting a negative number for an item quantity, Allowing special characters in a username field that are used in SQL queries, Not checking the type or range of an input parameter before using it in calculations." - keywords: "input validation, data validation, sanitization, untrusted input, security checks, malformed data, type checking, range checking"
                CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') - The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. - examples: "User input like ../../etc/passwd used in a file open operation, A file download script that takes a filename parameter without sanitizing ../, Using user-provided path components directly in filesystem operations." - keywords: "path traversal, directory traversal, dot-dot-slash, file access, input sanitization, LFI, restricted directory bypass"
                CWE-59: Improper Link Resolution Before File Access ('Link Following') - The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource. - examples: "A privileged program writes to a log file in a user-writable directory where the user can replace the log with a symlink to /etc/shadow, Checking permissions on a symlink itself instead of the target file, Race conditions where a file is replaced by a symlink between check and use (TOCTOU)." - keywords: "link following, symbolic link, symlink, TOCTOU, file access, race condition, privilege escalation, file system attack"
                CWE-667: Improper Locking - The software does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors. - examples: "Forgetting to release a mutex after acquiring it, leading to deadlock, Acquiring locks in inconsistent order across different threads causing deadlocks, Using a non-recursive lock in a recursive function." - keywords: "improper locking, synchronization, race condition, deadlock, mutex, semaphore, concurrency, resource contention"
                CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') - The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. - examples: "Passing unsanitized user input as an argument to system() or exec() calls, User input like -o malicious_file.sh being passed to a command-line utility, Failure to quote arguments containing spaces or special characters when building a command string." - keywords: "argument injection, command injection, parameter injection, shell injection, input sanitization, system call, command line arguments"
                CWE-1236: Improper Neutralization of Formula Elements in a CSV File - The software saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by spreadsheet software. - examples: "Exporting user-provided data starting with = (e.g. =SUM(A1:A2)) directly into a CSV, Not prefixing potentially malicious cell values with a single quote, Allowing DDE commands in CSV content." - keywords: "CSV injection, formula injection, spreadsheet, data export, sanitization, command execution, DDE, data exfiltration"
                CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') - The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. - examples: "Echoing user input from a URL parameter directly into HTML, Displaying user comments without escaping HTML tags, Injecting user-provided data into JavaScript string literals without proper escaping." - keywords: "XSS, cross-site scripting, input sanitization, output encoding, web security, javascript injection, HTML injection, DOM XSS, reflected XSS, stored XSS"
                CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component. - examples: "Generating XML with unescaped user data leading to XML injection, Creating LDAP queries by concatenating unsanitized user input, Building OS commands with user input without proper escaping (leading to OS Command Injection)." - keywords: "injection, generic injection, special elements, sanitization, escaping, output encoding, command injection, SQL injection, LDAP injection, XML injection"
                CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection') - The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component. - examples: "A web script that pings a host provided by user input by building a command string like ping + user_host, Using user input directly in subprocess.call('command ' + arg, shell=True) in Python, Concatenating user data into a batch script." - keywords: "command injection, os command injection, shell injection, input sanitization, arbitrary command execution, system calls, metacharacters"
                CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection') - The software constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. - examples: "Concatenating user input into a JSF EL expression like #{{bean. + userInput + }}, Allowing user-provided data in Spring Expression Language (SpEL) evaluations without sanitization, Server-side template injection where EL is used and input is not escaped." - keywords: "expression language injection, EL injection, template injection, server-side injection, input sanitization, OGNL, SpEL, JSF"
                CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') - The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. - examples: "A CGI script taking a filename from a GET request and passing it to grep unsanitized, Using user input in backticks or $(command) in shell scripts, Passing unsanitized input to functions like os.system() in Python or Runtime.exec() in Java with command concatenation." - keywords: "os command injection, command injection, shell injection, input sanitization, arbitrary command execution, metacharacters, shell metacharacters"
                CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') - The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. - examples: "Building a login query like SELECT * FROM users WHERE username=' + user + ' AND password=' + pass + ', Using user-provided sort order parameter directly in ORDER BY clause, Not using parameterized queries or prepared statements for dynamic SQL." - keywords: "SQL injection, SQLi, database injection, input sanitization, parameterized queries, ORM, dynamic SQL, data exfiltration"
                CWE-281: Improper Preservation of Permissions - The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended. - examples: "A backup utility restoring files with overly permissive default permissions instead of original ones, A file copy operation that doesn't replicate ACLs, Software installation that changes permissions of existing system files insecurely." - keywords: "permissions, access control, file permissions, privilege escalation, insecure defaults, ACLs, umask"
                CWE-269: Improper Privilege Management - The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor. - examples: "Granting admin rights to a user for a temporary task but never revoking them, A process running with root privileges when only needing access to a specific port, Allowing users to assign arbitrary roles to themselves or others." - keywords: "privilege management, access control, authorization, least privilege, privilege escalation, role management, excessive privileges"
                CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer - The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors. - examples: "An application that 'deletes' user data by merely marking it as inactive in the database, Sharing a document that still contains tracked changes or metadata revealing sensitive info, Failing to scrub geolocation data from photos before publishing." - keywords: "data sanitization, sensitive information removal, data scrubbing, information disclosure, redaction, metadata, data remanence"
                CWE-404: Improper Resource Shutdown or Release - The program does not release or incorrectly releases a resource before it is made available for re-use. - examples: "Opening files or network connections in a loop without closing them, Forgetting to call fclose() after fopen(), Not releasing database connections from a connection pool after use." - keywords: "resource leak, resource management, memory leak, file handle leak, connection leak, shutdown, finalization, garbage collection"
                CWE-307: Improper Restriction of Excessive Authentication Attempts - The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks. - examples: "No account lockout mechanism after multiple failed login attempts, No CAPTCHA or rate limiting on the login page, Allowing an unlimited number of password reset attempts." - keywords: "brute force, authentication attempts, account lockout, rate limiting, password guessing, CAPTCHA, credential stuffing"
                CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer - The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. - examples: "Writing past the end of an array (buffer overflow), Reading before the beginning of a buffer (buffer underread), Using an incorrect size in memcpy or memset." - keywords: "buffer overflow, out-of-bounds read, out-of-bounds write, memory corruption, bounds checking, memory safety, heap overflow, stack overflow"
                CWE-920: Improper Restriction of Power Consumption - The software operates in an environment in which power is a limited resource that cannot be automatically replenished, but the software does not properly restrict the amount of power that its operation consumes. - examples: "A mobile app that keeps GPS active unnecessarily draining the battery, An embedded device performing CPU-intensive calculations in a tight loop without sleep, Firmware that doesn't utilize low-power modes effectively." - keywords: "power consumption, battery drain, resource exhaustion, denial of service, embedded systems, IoT, energy efficiency"
                CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') - The software uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities. - examples: "Parsing an XML file with a 'billion laughs' payload (recursive entity definition), An XML parser that doesn't limit entity expansion depth or total size, DTD processing enabled by default without safeguards against entity bombs." - keywords: "XML entity expansion, XXE, billion laughs attack, denial of service, DoS, DTD, XML parsing, resource exhaustion, entity bomb"
                CWE-1021: Improper Restriction of Rendered UI Layers or Frames - The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with. - examples: "A website allowing itself to be embedded in an <iframe> on a malicious site, No use of X-Frame-Options or Content Security Policy frame-ancestors headers, UI redressing where a transparent iframe overlays a legitimate button." - keywords: "clickjacking, UI redressing, frame busting, X-Frame-Options, content security policy, iframe security, visual deception"
                CWE-611: Improper Restriction of XML External Entity Reference - The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. - examples: "An XML parser configured to resolve external entities processing user-supplied XML that references file:///etc/passwd, Using external DTDs from untrusted sources, SSRF via XML external entity resolution." - keywords: "XXE, XML external entity, XML injection, information disclosure, SSRF, file access, data exfiltration, DTD processing"
                CWE-662: Improper Synchronization - The software utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes. - examples: "Multiple threads accessing and modifying a shared list without locks, A 'check-then-act' sequence on a shared variable without atomicity, Incorrect use of volatile keyword expecting it to provide thread safety for complex operations." - keywords: "improper synchronization, race condition, concurrency, threading, shared resource, mutex, critical section, atomicity"
                CWE-129: Improper Validation of Array Index - The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array. - examples: "User-supplied integer used directly as an array index without bounds checking, Calculating an index based on user input that can result in a negative value, Off-by-one error in loop condition leading to out-of-bounds access." - keywords: "array index, out-of-bounds, bounds checking, memory access, input validation, index validation, buffer read/write"
                CWE-354: Improper Validation of Integrity Check Value - The software does not validate or incorrectly validates the integrity check values or "checksums" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission. - examples: "Accepting a software update if the hash matches one from a list downloaded over HTTP (hash could also be tampered), Ignoring a MAC (Message Authentication Code) failure and processing the data anyway, Using a weak checksum algorithm (like CRC32) for security purposes." - keywords: "integrity check, checksum, hash validation, data tampering, message authentication, MAC, digital signature, data corruption"
                CWE-1284: Improper Validation of Specified Quantity in Input - The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties. - examples: "Allocating memory based on a user-provided size without checking for excessively large or negative values, A loop that iterates a user-specified number of times without an upper bound, Reading 'N' bytes from a stream where 'N' is user-controlled and not validated." - keywords: "quantity validation, size validation, length validation, input validation, integer overflow, buffer allocation, resource consumption, denial of service"
                CWE-347: Improper Verification of Cryptographic Signature - The software does not verify, or incorrectly verifies, the cryptographic signature for data. - examples: "Accepting a JWT without checking its signature, Implementing signature verification but using an algorithm specified by the attacker (e.g. 'none' algorithm in JWT), Not checking the certificate chain of the signing key." - keywords: "cryptographic signature, signature verification, data integrity, authentication, non-repudiation, spoofing, JWT, code signing, algorithm confusion"
                CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') - The software receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype. - examples: "A JavaScript merge function that recursively assigns properties allowing __proto__ to be set, Unsafely parsing JSON input that can inject properties into Object.prototype, A query parameter parser that allows arbitrary nested object creation leading to prototype modification." - keywords: "prototype pollution, javascript, object prototype, attribute modification, RCE, denial of service, insecure merge, object injection"
                CWE-326: Inadequate Encryption Strength - The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. - examples: "Using DES for encrypting sensitive financial data, Employing RSA with a 512-bit key for long-term data protection, Using a custom encryption algorithm that has not been publicly vetted." - keywords: "weak encryption, encryption strength, cryptography, brute force, key length, outdated algorithm, DES, short keys, custom crypto"
                CWE-838: Inappropriate Encoding for Output Context - The software uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component. - examples: "Generating UTF-8 data but sending an HTTP header specifying Content-Type: text/plain; charset=ISO-8859-1, Storing data in one encoding and retrieving it assuming another, leading to mojibake, Inconsistent encoding in different parts of a multipart message." - keywords: "encoding mismatch, output encoding, character encoding, data corruption, mojibake, XSS, unicode, UTF-8, ISO-8859-1"
                CWE-829: Inclusion of Functionality from Untrusted Control Sphere - The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere. - examples: "PHP include() or require() using a URL parameter: include($_GET['page']), Loading a Python module from a user-writable directory, Using Java ClassLoader.loadClass() with a class name from untrusted input." - keywords: "untrusted include, remote file inclusion, RFI, local file inclusion, LFI, code injection, supply chain, dynamic loading"
                CWE-459: Incomplete Cleanup - The software does not properly "clean up" and remove temporary or supporting resources after they have been used. - examples: "Creating temporary files with sensitive data in /tmp but not deleting them on application exit or error, Leaving debug flags or backdoor accounts active in production code, Not clearing sensitive data from memory after processing." - keywords: "incomplete cleanup, temporary files, resource leak, information disclosure, data remanence, leftover debug code"
                CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling') - The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination. - examples: "A front-end proxy uses Content-Length while the back-end server uses Transfer-Encoding: chunked for request delimitation, Exploiting differences in how two HTTP servers parse ambiguous Content-Length headers, Using CL.TE or TE.CL vulnerabilities to desynchronize requests." - keywords: "HTTP request smuggling, HTTP response smuggling, request desynchronization, proxy, firewall, bypass, CL.TE, TE.CL, HTTP parsing"
                CWE-863: Incorrect Authorization - The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions. - examples: "Checking user.role == 'admin' but the actual role is stored in user.permissions.isAdmin, Allowing access if any one of multiple cumulative permission checks passes, when all should be required, Incorrectly implementing 'deny by default' logic." - keywords: "incorrect authorization, access control, authorization bypass, privilege escalation, permission flaw, logical error in checks"
                CWE-682: Incorrect Calculation - The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management. - examples: "A financial application miscalculates interest due to floating-point precision errors, An off-by-one error in calculating buffer sizes leading to overflow, Incorrectly calculating remaining attempts for login causing premature lockout or no lockout." - keywords: "incorrect calculation, logic error, arithmetic error, precision error, financial miscalculation, security decision, off-by-one, rounding error"
                CWE-131: Incorrect Calculation of Buffer Size - The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow. - examples: "Forgetting to add +1 for null terminator when allocating for a string, Using sizeof(pointer) instead of sizeof(pointee_type) or string length for malloc, Integer overflow in size calculation width * height before allocation." - keywords: "buffer size calculation, buffer overflow, memory allocation, off-by-one, integer overflow, malloc, sizeof error, null terminator"
                CWE-697: Incorrect Comparison - The software compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses. - examples: "Comparing signed and unsigned integers where a negative signed value becomes a large unsigned value, Using == to compare floating point numbers for equality, Incorrectly comparing user roles, e.g. if (role != "admin") instead of checking for specific allowed roles." - keywords: "incorrect comparison, logic error, type mismatch, string comparison, equality check, authentication bypass, signed/unsigned comparison"
                CWE-681: Incorrect Conversion between Numeric Types - When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur. - examples: "Casting a long to int losing significant bits, potentially making a large positive number small or negative, Converting a floating-point number to an integer via truncation where precision is critical, Implicit conversion from signed to unsigned leading to unexpected behavior with negative numbers." - keywords: "numeric type conversion, integer overflow, truncation, data loss, type casting, precision error, sign extension, implicit conversion"
                CWE-276: Incorrect Default Permissions - During installation, installed file permissions are set to allow anyone to modify those files. - examples: "Software installer setting configuration files to be world-writable (777), Default umask being too permissive (e.g., 0000), Application data directories created with global read/write access." - keywords: "incorrect default permissions, insecure defaults, file permissions, access control, privilege escalation, umask, world-writable"
                CWE-732: Incorrect Permission Assignment for Critical Resource - The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors. - examples: "A /etc/shadow file being readable by non-root users, Admin panel accessible by regular users due to misconfigured web server rules, Database granting UPDATE privileges on sensitive tables to low-privilege application accounts." - keywords: "incorrect permissions, critical resource, access control, information disclosure, privilege escalation, ACLs, file system permissions"
                CWE-669: Incorrect Resource Transfer Between Spheres - The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource. - examples: "A privileged process passing a file descriptor to an unprivileged process without proper sanitization of its capabilities, A web application reflecting user input into a system command executed in a more privileged context, Exposing internal object references to a less trusted environment." - keywords: "resource transfer, sphere boundary, control sphere, cross-domain, privilege escalation, capability passing, context switching"
                CWE-704: Incorrect Type Conversion or Cast - The software does not correctly convert an object, resource, or structure from one type to a different type. - examples: "Casting a void* to an incorrect struct type and accessing its members, Downcasting a base class pointer to a derived class pointer when the object is not actually of the derived type, Implicit type conversion in C/C++ that leads to data loss or misinterpretation." - keywords: "type conversion, type casting, data corruption, type confusion, unexpected behavior, downcast, reinterpret_cast"
                CWE-335: Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG) - The software uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds. - examples: "Seeding a PRNG with a constant value (e.g., srand(0)), Seeding with time(NULL) which can be predictable if calls are close together, Re-seeding the PRNG too frequently with low-entropy sources." - keywords: "PRNG seed, random number generator, predictability, weak entropy, static seed, insufficient randomness, srand, time()"
                CWE-407: Inefficient Algorithmic Complexity - An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached. - examples: "Using a nested loop algorithm (O(n^2)) where a linear solution (O(n)) exists for processing user-supplied data, A string matching algorithm that degrades to quadratic complexity on specific inputs, Hash table with poor collision resolution leading to linear search times." - keywords: "algorithmic complexity, denial of service, DoS, performance, resource exhaustion, inefficient algorithm, O(n^2), worst-case scenario"
                CWE-1333: Inefficient Regular Expression Complexity - The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles. - examples: "Regex like (a+)+b which can cause catastrophic backtracking, Using nested quantifiers with overlapping patterns, A regex that performs poorly on strings with many near misses." - keywords: "regex DoS, ReDoS, regular expression, catastrophic backtracking, denial of service, CPU exhaustion, inefficient regex, performance"
                CWE-1188: Insecure Default Initialization of Resource - The software initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure. - examples: "Default admin password like 'admin' or 'password', SNMP community string set to 'public' by default, A firewall product having a default 'allow all' rule." - keywords: "insecure defaults, default credentials, weak configuration, initialization, security misconfiguration, hardcoded password"
                CWE-922: Insecure Storage of Sensitive Information - The software stores sensitive information without properly limiting read or write access by unauthorized actors. - examples: "Storing API keys in a world-readable file, Database backups containing PII stored in an S3 bucket with public access, User session data written to a shared temporary directory with insecure permissions." - keywords: "insecure storage, sensitive data, data exposure, access control, encryption, cleartext storage, permissions, PII"
                CWE-532: Insertion of Sensitive Information into Log File - Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information. - examples: "Logging full HTTP requests including session cookies or authorization headers, Writing raw exception details that include user passwords or PII, Debug logs that output decrypted sensitive data." - keywords: "sensitive data in logs, log injection, information disclosure, passwords in logs, PII, session tokens in logs, credit card numbers in logs"
                CWE-331: Insufficient Entropy - The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others. - examples: "Generating session IDs using a PRNG seeded with only the current time (low resolution), Creating cryptographic keys from a small set of easily guessable inputs, Using rand() for security-critical random numbers without proper seeding from /dev/urandom." - keywords: "insufficient entropy, weak randomness, PRNG, predictability, cryptographic weakness, random number generation, /dev/random, CSPRNG"
                NVD-CWE-noinfo: Insufficient Information - There is insufficient information about the issue to classify it; details are unkown or unspecified. - examples: "Vulnerability report states 'a security issue' without technical details, Advisory mentions a flaw but vendor has not disclosed specifics, CVE entry marked with this when details are pending." - keywords: "insufficient information, unclassified, unknown weakness, unspecified, nvd, pending details, undisclosed"
                NVD-CWE-Other: Other - NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset. - examples: "A very specific or niche vulnerability not fitting existing CWEs used by NVD, A weakness category that NVD has chosen not to map directly, A complex issue spanning multiple unmapped CWEs." - keywords: "other, non-standard, uncategorized, miscellaneous weakness, nvd, mapping limitation, unique flaw"
                CWE-613: Insufficient Session Expiration - According to WASC, "Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization." - examples: "Session cookies that never expire or have extremely long lifetimes (e.g., years), Not invalidating a session on the server-side after logout, Re-authenticating a user without issuing a new session ID if the old one is still active." - keywords: "session expiration, session management, session hijacking, timeout, stale session, persistent session, logout functionality"
                CWE-345: Insufficient Verification of Data Authenticity - The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data. - examples: "Accepting firmware updates without checking digital signatures, Trusting data from a DNS server without DNSSEC, Processing messages from a queue without verifying the sender's identity or message integrity." - keywords: "data authenticity, data integrity, spoofing, tampering, signature validation, source validation, message origin, non-repudiation"
                CWE-522: Insufficiently Protected Credentials - The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval. - examples: "Storing passwords using unsalted MD5 hashes, Transmitting passwords in cleartext over HTTP, Hardcoding API keys directly in client-side JavaScript." - keywords: "protected credentials, password storage, credential exposure, cleartext passwords, weak hashing, insecure transmission, unsalted hash, hardcoded secrets"
                CWE-190: Integer Overflow or Wraparound - The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. - examples: "Calculating malloc size with count * item_size where the product overflows to a small number, A loop counter i++ wraps around from max_int to a negative value, A security check if (value + offset < limit) where value + offset overflows." - keywords: "integer overflow, wraparound, arithmetic overflow, buffer overflow, memory allocation, security checks, numeric calculation, signedness"
                CWE-191: Integer Underflow (Wrap or Wraparound) - The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. - examples: "Calculating buffer offset ptr - size where size is larger than ptr's numeric value (if ptr is an int), A check if (balance - withdrawal_amount >= 0) where balance - withdrawal_amount underflows to a large positive number, Decrementing an unsigned integer below zero." - keywords: "integer underflow, wraparound, arithmetic underflow, security checks, negative values, numeric calculation, buffer offset"
                CWE-436: Interpretation Conflict - Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state. - examples: "A web proxy and backend server parsing HTTP headers (e.g., Content-Length) differently leading to request smuggling, Different interpretation of character encodings between two systems, Inconsistent handling of ambiguous file path separators (/ vs \) by different components." - keywords: "interpretation conflict, protocol mismatch, state inconsistency, system interaction, interoperability, ambiguity, request smuggling, parsing differences"
                CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop') - The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop. - examples: "A while(true) loop without a break statement or other exit mechanism, A for loop where the increment/decrement operation never allows the condition to be met (e.g., for(i=0; i!=10; i+=2) if i starts odd), A loop condition dependent on a variable that is never modified within the loop body." - keywords: "infinite loop, unreachable exit, denial of service, DoS, resource exhaustion, loop control, hang, non-termination"
                CWE-306: Missing Authentication for Critical Function - The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. - examples: "An admin panel accessible without login, An API endpoint for deleting user accounts that does not require a session token, A feature to change system configuration available to any network user." - keywords: "missing authentication, no authentication, critical function, access control, unauthorized access, unauthenticated access, public function"
                CWE-862: Missing Authorization - The software does not perform an authorization check when an actor attempts to access a resource or perform an action. - examples: "Any authenticated user can access /admin/delete_user?id=xxx regardless of their role, A user can view another user's private messages by guessing the message ID, No check to ensure a user owns a resource before allowing modification." - keywords: "missing authorization, no authorization, access control, privilege escalation, insecure direct object reference, IDOR, permission check"
                CWE-311: Missing Encryption of Sensitive Data - The software does not encrypt sensitive or critical information before storage or transmission. - examples: "Storing credit card numbers in a database without encryption, Transmitting user passwords over HTTP, Sending PII via unencrypted email." - keywords: "missing encryption, unencrypted data, cleartext, sensitive data exposure, confidentiality, PII, data in transit, data at rest"
                CWE-909: Missing Initialization of Resource - The software does not initialize a critical resource. - examples: "A pointer is declared but not assigned before being dereferenced, A security flag (e.g., is_admin) is not set to a default safe value before use, Using a file descriptor that has not been opened." - keywords: "missing initialization, uninitialized resource, default values, unexpected state, null pointer, undefined behavior, uninitialized variable"
                CWE-401: Missing Release of Memory after Effective Lifetime - The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. - examples: "Calling malloc repeatedly in a loop without corresponding free calls, An object that allocates memory in its constructor but has no destructor or dispose method to release it, Creating data structures (e.g., list nodes) and losing pointers to them before deallocation." - keywords: "memory leak, resource leak, memory management, garbage collection, denial of service, malloc/free, new/delete"
                CWE-772: Missing Release of Resource after Effective Lifetime - The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed. - examples: "Opening files without closing them (fopen without fclose), Acquiring database connections from a pool and not returning them, Not releasing network sockets after communication ends." - keywords: "resource leak, file handle leak, connection leak, memory leak, resource management, close(), release()"
                CWE-476: NULL Pointer Dereference - A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. - examples: "Accessing ptr->member when ptr is NULL, A function returns NULL on error but the caller uses the return value without checking, Using an object pointer before it's properly constructed and initialized." - keywords: "null pointer dereference, crash, segmentation fault, null check, pointer access, NPE, invalid memory access"
                CWE-203: Observable Discrepancy - The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not. - examples: "Login page responds faster for invalid usernames than for valid usernames with incorrect passwords (timing attack), Different error messages for 'user not found' vs 'incorrect password', API returning more detailed error for one failure type over another." - keywords: "observable discrepancy, timing attack, side channel, information disclosure, error messages, user enumeration, behavioral difference"
                CWE-193: Off-by-one Error - A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value. - examples: "Looping for (i=0; i <= size; i++) when accessing array[i] (should be < size), Allocating strlen(str) bytes for a string copy instead of strlen(str)+1 for the null terminator, Using < instead of <= (or vice-versa) in a boundary condition check." - keywords: "off-by-one, boundary error, buffer overflow, loop termination, array indexing, fencepost error, +/-1 error"
                CWE-672: Operation on a Resource after Expiration or Release - The software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked. - examples: "Using a file descriptor after the file has been closed (close(fd); write(fd, ...)), Accessing an object after its memory has been free()d (Use-After-Free), Continuing to use a session ID after the session has been invalidated on the server." - keywords: "use after free, UAF, operation on released resource, dangling pointer, stale reference, resource lifetime, session invalidation"
                CWE-346: Origin Validation Error - The software does not properly verify that the source of data or communication is valid. - examples: "A web application accepting cross-domain requests (CORS) from * without proper checks, A WebSocket server not verifying the Origin header of incoming connections, An IPC mechanism trusting any local process without sender verification." - keywords: "origin validation, CORS misconfiguration, cross-domain, source verification, trust boundary, Origin header, CSRF"
                CWE-125: Out-of-bounds Read - The software reads data past the end, or before the beginning, of the intended buffer. - examples: "Reading buffer[length] when length is the size of the buffer (valid indices are 0 to length-1), Using a negative index to access an array, A memcpy or similar function reading more bytes than available in the source buffer." - keywords: "out-of-bounds read, OOB read, buffer over-read, memory disclosure, information leak, bounds checking, Heartbleed"
                CWE-787: Out-of-bounds Write - The software writes data past the end, or before the beginning, of the intended buffer. - examples: "Writing to buffer[length] when length is the size of the buffer, strcpy to a buffer that is too small for the source string, Integer overflow in index calculation leading to writing outside allocated memory." - keywords: "out-of-bounds write, OOB write, buffer overflow, memory corruption, code execution, bounds checking, heap overflow, stack overflow"
                CWE-617: Reachable Assertion - The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. - examples: "An assert(user_input != NULL) that crashes if user_input is NULL, An assertion checking an invariant that can be violated by crafted input, Using assertions for input validation in production builds where assertions are compiled out or cause termination." - keywords: "reachable assertion, assert, denial of service, DoS, crash, input validation, defensive programming, unhandled condition"
                CWE-763: Release of Invalid Pointer or Reference - The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly. - examples: "Calling free() on a pointer not obtained from malloc() (e.g., stack variable, global), Calling delete on a pointer allocated with malloc(), or free() on new, Using free() on an already freed pointer if not a double-free (e.g. if it was reallocated by something else)." - keywords: "invalid free, release invalid pointer, memory corruption, crash, free(), delete, memory management, heap corruption"
                CWE-565: Reliance on Cookies without Validation and Integrity Checking - The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user. - examples: "Storing user role (e.g., isAdmin=true) in a client-side cookie without server-side verification or signing, Using a cookie value directly in an SQL query without sanitization, Trusting a cookie to indicate authentication status without re-validating against a server session." - keywords: "cookie manipulation, insecure cookie, session management, authentication bypass, authorization bypass, client-side trust, signed cookies, HttpOnly"
                CWE-918: Server-Side Request Forgery (SSRF) - The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. - examples: "A feature to fetch an image from a user-provided URL which can be pointed to internal services like http://127.0.0.1/admin, A PDF generator that loads content from URLs specified in an XML/HTML input, Cloud metadata service abuse by providing URLs like http://169.254.169.254/." - keywords: "SSRF, server-side request forgery, URL fetching, internal network access, port scanning, cloud metadata abuse, input validation, allowlist/denylist"
                CWE-384: Session Fixation - Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. - examples: "User logs in, but the application continues to use the pre-login session ID, Attacker tricks victim into using a session ID known to the attacker, then waits for victim to log in, Not regenerating session ID upon successful authentication." - keywords: "session fixation, session hijacking, session management, authentication, session ID regeneration, pre-login session"
                CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition - The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. - examples: "Checking if a file exists (check_file) then opening it (open_file), but the file is replaced by a symlink in between, Validating user permissions then performing an action, but permissions change before action execution, Checking available balance then debiting an account without an atomic transaction." - keywords: "TOCTOU, time-of-check time-of-use, race condition, concurrency, file system race, atomicity, locking"
                CWE-252: Unchecked Return Value - The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. - examples: "Ignoring the return value of malloc() which could be NULL, Not checking if fwrite() successfully wrote all bytes, Calling a function that can fail (e.g., network send) without verifying its success status." - keywords: "unchecked return value, error handling, ignored error, robustness, unexpected state, function result, status code"
                CWE-674: Uncontrolled Recursion - The product does not properly control the amount of recursion which takes place, consuming excessive resources, such as allocated memory or the program stack. - examples: "A recursive function to parse a data structure (e.g., JSON) without a depth limit, A factorial function that can be called with a very large number from user input, Mutually recursive functions where the base case is not reached or is controlled by external input." - keywords: "uncontrolled recursion, stack overflow, denial of service, DoS, recursion depth, base case, resource exhaustion"
                CWE-400: Uncontrolled Resource Consumption - The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. - examples: "Allowing a user to request an arbitrarily large file for processing, A regex that takes exponential time on certain inputs (ReDoS), Allocating memory based on a user-provided size without limits, leading to DoS." - keywords: "uncontrolled resource consumption, denial of service, DoS, resource exhaustion, memory allocation, CPU usage, rate limiting, input validation"
                CWE-427: Uncontrolled Search Path Element - The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. - examples: "An application that loads DLLs from the current working directory first, where an attacker can place a malicious DLL, Using . in the PATH environment variable on Unix, A script that includes files using a path that includes a user-writable directory." - keywords: "uncontrolled search path, DLL hijacking, path manipulation, library loading, current working directory, environment variable"
                CWE-428: Unquoted Search Path or Element - The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path. - examples: "A Windows service registered with an unquoted path like C:\\Program Files\\My App\\service.exe allowing C:\\Program.exe to be executed, A script that calls an executable using an unquoted path with spaces, Configuration files specifying paths without quotes." - keywords: "unquoted search path, path injection, Windows service, whitespace in path, privilege escalation, command execution"
                CWE-434: Unrestricted Upload of File with Dangerous Type - The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment. - examples: "Allowing users to upload .php or .jsp files to a web server's document root, Uploading an .exe file to a directory from which applications are run, Not validating file extensions or MIME types for uploaded files that could be executable." - keywords: "unrestricted file upload, dangerous file type, code execution, web shell, file validation, MIME type, extension check"
                CWE-426: Untrusted Search Path - The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. - examples: "A program using an environment variable like LD_LIBRARY_PATH or PYTHONPATH set by a user to find libraries, An application that loads plugins from a directory specified in a user-modifiable configuration file, Scripts that source other scripts from paths influenced by user input." - keywords: "untrusted search path, DLL hijacking, library loading, environment variable, path manipulation, code execution, RPATH"
                CWE-601: URL Redirection to Untrusted Site ('Open Redirect') - A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks. - examples: "A login page redirects to $_GET['redirect_url'] without validating the URL is on the same domain, A link shortener that doesn't check if the target URL is malicious, Using user-provided URLs in HTTP Location headers without proper validation." - keywords: "open redirect, URL redirection, phishing, untrusted site, input validation, allowlist, Location header"
                CWE-416: Use After Free - Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. - examples: "An object is deleted, but a pointer to it is still used later, A data structure element is freed, but iterators or other references to it are not updated, Using a pointer that was passed to free() in an error handling path that doesn't immediately exit." - keywords: "use after free, UAF, dangling pointer, memory corruption, crash, remote code execution, heap exploitation"
                CWE-327: Use of a Broken or Risky Cryptographic Algorithm - The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. - examples: "Using MD5 or SHA1 for password hashing, Employing DES or RC4 for data encryption, Relying on custom-made 'homegrown' cryptographic algorithms." - keywords: "broken crypto, risky crypto, weak algorithm, MD5, SHA1, DES, RC4, outdated cryptography, insecure algorithm"
                CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) - The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong. - examples: "Using java.util.Random or Python's random module to generate session IDs or encryption keys, Relying on rand() or libc PRNGs for cryptographic purposes, PRNGs with small internal state or predictable output sequences." - keywords: "weak PRNG, cryptographically weak PRNG, CSPRNG, rand(), java.util.Random, predictability, insufficient randomness, security context"
                CWE-134: Use of Externally-Controlled Format String - The software uses a function that accepts a format string as an argument, but the format string originates from an external source. - examples: "Calling printf(user_input) instead of printf('%s', user_input), Using user-controlled data as the first argument to syslog(), sprintf(), or fprintf(), A logging function that takes a format string directly from a network request." - keywords: "format string vulnerability, format string bug, printf, sprintf, memory corruption, information disclosure, code execution, %n"
                CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') - The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code. - examples: "Java Class.forName(userInput).newInstance() where userInput comes from an HTTP parameter, Python getattr(module, user_string)() to call functions, Deserializing objects where the class name is controlled by the attacker." - keywords: "unsafe reflection, code execution, class loading, dynamic invocation, input validation, Class.forName, getattr, deserialization"
                CWE-798: Use of Hard-coded Credentials - The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. - examples: "Default admin password compiled into the application binary, Database connection string with username/password stored in source code, A fixed AES encryption key embedded in a mobile app." - keywords: "hard-coded credentials, hardcoded password, embedded key, secret in code, backdoor, insecure default"
                CWE-706: Use of Incorrectly-Resolved Name or Reference - The software uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere. - examples: "DNS rebinding attacks where a malicious site resolves to an internal IP after an initial check, TOCTOU issues with filename resolution where a symlink is introduced, Relying on hostname resolution that can be manipulated by a local attacker (e.g., /etc/hosts)." - keywords: "incorrect name resolution, DNS rebinding, TOCTOU, symlink attack, reference misresolution, control sphere bypass"
                CWE-330: Use of Insufficiently Random Values - The software uses insufficiently random numbers or values in a security context that depends on unpredictable numbers. - examples: "Generating password reset tokens that are easily guessable (e.g., sequential or based on timestamp), Using a PRNG with a small seed space for cryptographic keys, Session IDs that follow a predictable pattern." - keywords: "insufficient randomness, predictability, weak PRNG, entropy, guessable tokens, cryptographic weakness, session ID generation"
                CWE-916: Use of Password Hash With Insufficient Computational Effort - The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive. - examples: "Using unsalted MD5 or SHA1 for password storage, Using bcrypt or scrypt with a very low work factor/iteration count, Custom hashing schemes that are fast to compute." - keywords: "weak password hashing, insufficient effort, bcrypt, scrypt, PBKDF2, Argon2, password cracking, salt, work factor, iteration count, MD5, SHA1"
                CWE-908: Use of Uninitialized Resource - The software uses or accesses a resource that has not been initialized. - examples: "Reading from a variable before any value is assigned to it (common in C/C++), Using an object whose constructor was not called or failed, Dereferencing a pointer member of a struct that was malloced but not initialized." - keywords: "uninitialized resource, uninitialized variable, use before initialization, undefined behavior, garbage value, null pointer, default state"
                CWE-640: Weak Password Recovery Mechanism for Forgotten Password - The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak. - examples: "Password reset based on easily guessable security questions (e.g., 'What is your favorite color?'), Sending new passwords in cleartext via email, Generating predictable password reset tokens." - keywords: "weak password recovery, forgotten password, security questions, reset token, account takeover, insecure mechanism, predictable token"
                CWE-521: Weak Password Requirements - The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts. - examples: "Allowing passwords like '123456' or 'password', Not enforcing minimum length or complexity (mix of character types), No check against common password lists." - keywords: "weak password requirements, password policy, password strength, brute force, dictionary attack, password complexity, minimum length"
                CWE-91: XML Injection (aka Blind XPath Injection) - The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system. - examples: "Concatenating user input directly into an XPath query string, Building XML documents by string concatenation with unescaped user data, A SOAP service that parses XML containing malicious external entity references (XXE if parser supports it)." - keywords: "XML injection, XPath injection, XML parsing, data manipulation, XXE, SOAP injection, input sanitization, special characters"

            Rules for returning the vendor:
            - Return only the official/primary vendor name
            - For open source projects, return the organization maintaining it
            - If multiple vendors are mentioned, return the one responsible for the vulnerable component
            - Normalize variations of the same vendor name
            - If no clear vendor is found, return "Unknown"
            - Use official vendor names where possible and keep the same name for vulnerabilities of the same vendor

            Returns only the result nothing more!
            Example:
                    {{"cwe_category": "CWE-ID", "explanation": "Brief Explanation of the CWE", "vendor": "Vendor Name", "cause": "Cause of the Vulnerability", "impact": "Impact of the Vulnerability"}}

            Output:
            ```json
                {{"cwe_category": "CWE-ID", "explanation": "Brief Explanation of the CWE", "vendor": "Vendor Name", "cause": "Cause of the Vulnerability", "impact": "Impact of the Vulnerability"}}
            ```
            """
            
        if(type == 'api'):
            prompt = "{prompt}\)"

            client = AsyncOpenAI(api_key=api_key, base_url=base_url)
            try:
                completion = await client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": prompt}]
                )
                result = _extract_category(completion.choices[0].message.content)
                return [result]
            except Exception as e:
                print(f"Error calling API: {e}")
                return [{"cwe_category": "UNKNOWN", "explanation": str(e), "vendor": "Unknown", "cause": "", "impact": ""}]
        
        if(type == 'local'):

            local_prompt = f"""
                You are a security expert.
                Categorize the following vulnerability description into a CWE category, identify the vendor, and extract the cause and impact of the vulnerability.
                Provide the CWE ID (only the CWE ID of the vulnerability), a brief explanation, the vendor name, the cause of the vulnerability, and its impact.

                Description:
                ```
                {description}
                ```
                Conform 'NVD CWE List' available for Classification:
                CWE-843: Access of Resource Using Incompatible Type ('Type Confusion') - The program allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type. - examples: "Casting a base class pointer to a derived class pointer of an unrelated type and accessing members, Using a C-style cast on a void pointer to an incorrect data structure, Interpreting raw byte buffer as a complex object of the wrong class." - keywords: "type confusion, incompatible type, resource access, type mismatch, memory corruption, pointer casting, object misinterpretation"
                CWE-824: Access of Uninitialized Pointer - The program accesses or uses a pointer that has not been initialized. - examples: "Dereferencing a pointer immediately after declaration without assignment, Using a pointer returned by a function that might be NULL without checking, Accessing a class member pointer that was not initialized in the constructor." - keywords: "uninitialized pointer, null pointer, memory access, crash, segmentation fault, dangling pointer, undefined behavior"
                CWE-770: Allocation of Resources Without Limits or Throttling - The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor. - examples: "Allowing users to request an unlimited number of session objects, Processing an XML file that can define an excessive number of entities leading to memory exhaustion, A loop that allocates memory based on user input without a size cap." - keywords: "resource allocation, unlimited allocation, denial of service, DoS, resource exhaustion, throttling, rate limiting, memory bloat"
                CWE-670: Always-Incorrect Control Flow Implementation - The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated. - examples: "An 'if' condition that is always true or always false due to a logical error, A loop that always exits after the first iteration or never terminates as intended, Incorrectly ordered conditional checks leading to unreachable code blocks." - keywords: "control flow, logic error, incorrect path, flawed algorithm, bug, unexpected behavior, dead code, unreachable code"
                CWE-294: Authentication Bypass by Capture-replay - A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes). - examples: "Replaying a captured login request containing session cookies, Re-submitting a previously captured financial transaction request, Using nonces or timestamps improperly allowing old messages to be accepted." - keywords: "authentication bypass, capture-replay, replay attack, session hijacking, network sniffing, man-in-the-middle, nonces, message freshness"
                CWE-290: Authentication Bypass by Spoofing - This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks. - examples: "Accepting user identity based solely on a user-controlled HTTP header (e.g., X-Forwarded-For), Trusting an IP address for authentication without further checks, An API that allows a user to specify another user's ID in a request to act as them." - keywords: "authentication bypass, spoofing, identity theft, impersonation, weak authentication, IP spoofing, request forgery"
                CWE-639: Authorization Bypass Through User-Controlled Key - The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data. - examples: "Accessing '/user_profile?id=123' and changing 'id' to '456' to view another user's profile, An API endpoint like '/api/orders/order_id' where changing order_id gives access to others' orders, Modifying a hidden form field containing a record identifier." - keywords: "authorization bypass, user-controlled key, insecure direct object reference, IDOR, access control, privilege escalation, parameter tampering"
                CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') - The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow. - examples: "Using strcpy() to copy user-provided string into a fixed-size buffer, Using sprintf() with user input without validating length, Reading network data into a buffer using recv() without checking the amount of data received against buffer capacity." - keywords: "buffer overflow, classic buffer overflow, memory corruption, input size, bounds checking, strcpy, gets, sprintf, stack overflow"
                CWE-312: Cleartext Storage of Sensitive Information - The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere. - examples: "Storing user passwords in a database column as plain text, Writing API keys to a configuration file without encryption, Logging credit card numbers to a local file." - keywords: "cleartext storage, sensitive data, unencrypted, plain text, data exposure, password storage, confidentiality, PII"
                CWE-319: Cleartext Transmission of Sensitive Information - The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. - examples: "Transmitting login credentials over HTTP instead of HTTPS, Sending API keys in URLs over unencrypted channels, Emailing unencrypted sensitive documents." - keywords: "cleartext transmission, sensitive data, unencrypted, plain text, network sniffing, man-in-the-middle, data exposure, http, insecure transport"
                CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') - The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently. - examples: "Two threads incrementing a shared counter without locks (read-modify-write), Checking if a file exists then writing to it without locking, leading to another process deleting it in between, Modifying a shared data structure from multiple threads without mutexes." - keywords: "race condition, concurrency, shared resource, improper synchronization, threading, deadlock, atomicity, mutual exclusion"
                CWE-352: Cross-Site Request Forgery (CSRF) - The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request. - examples: "A web application performs a state-changing action (e.g., password change) based on a GET request without tokens, A malicious site causes a user's browser to submit a form to a vulnerable site where the user is authenticated, Lack of anti-CSRF tokens in forms that perform sensitive actions." - keywords: "CSRF, cross-site request forgery, session riding, one-click attack, request validation, anti-csrf token, state-changing request"
                CWE-502: Deserialization of Untrusted Data - The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid. - examples: "Deserializing a Java object from an HTTP request without validating the object's class or contents, Using Python's pickle.loads() on data received from an untrusted network source, Processing serialized user preferences that can be manipulated to execute arbitrary code." - keywords: "deserialization, untrusted data, object injection, remote code execution, insecure deserialization, data validation, code execution, gadget chains"
                CWE-425: Direct Request ('Forced Browsing') - The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files. - examples: "Accessing an admin page like /admin/dashboard.php by directly typing the URL without being an admin, Discovering unlinked backup files like config.bak by guessing filenames, Navigating to internal API endpoints that are not meant for public access." - keywords: "forced browsing, direct request, authorization bypass, access control, URL manipulation, hidden files, insecure endpoint"
                CWE-369: Divide By Zero - The product divides a value by zero. - examples: "Calculating an average where the count of items can be zero, A mathematical formula where a denominator is derived from user input that could be zero, An offset calculation x / y where y is not checked for zero." - keywords: "divide by zero, arithmetic error, exception, crash, denial of service, runtime error"
                CWE-415: Double Free - The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations. - examples: "Freeing a pointer in a main function and also in a cleanup function for the same pointer, An error handling path frees a resource that is also freed in a standard exit path, Complex data structures where multiple parts might hold and try to free the same pointer." - keywords: "double free, memory corruption, heap corruption, use after free, memory management, pointer management"
                CWE-494: Download of Code Without Integrity Check - The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code. - examples: "An auto-update mechanism that downloads and runs an installer without checking its digital signature, A plugin system that loads remote scripts without validating their source or hash, Executing code fetched via HTTP without HTTPS or signature verification." - keywords: "code download, integrity check, code signing, supply chain attack, untrusted code, malware, remote code execution, signature verification"
                CWE-834: Excessive Iteration - The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed. - examples: "A while loop whose condition depends on external input that can prevent termination, A for loop processing elements of a list where the list can be excessively large due to user input, Recursive function calls without a proper base case or depth limit based on untrusted data." - keywords: "excessive iteration, infinite loop, denial of service, DoS, resource exhaustion, loop control, CPU usage, hang"
                CWE-668: Exposure of Resource to Wrong Sphere - The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource. - examples: "A web server configured to serve files from outside the web root, An internal administrative API endpoint made accessible from the public internet, Sharing an internal database connection string with a client-side application." - keywords: "resource exposure, wrong sphere, access control, information disclosure, unintended access, permissions, network misconfiguration"
                CWE-200: Exposure of Sensitive Information to an Unauthorized Actor - The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information. - examples: "Error messages revealing system paths or database structure, API responses including excessive user data not needed by the client, Directory listings enabled on a web server showing sensitive files." - keywords: "sensitive information exposure, data leak, information disclosure, unauthorized access, confidentiality breach, verbose errors, PII"
                CWE-610: Externally Controlled Reference to a Resource in Another Sphere - The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere. - examples: "A file inclusion vulnerability where user input specifies a path to /etc/passwd, An SSRF flaw where a user-provided URL is fetched by the server, A system call that takes a filename controlled by a low-privilege user." - keywords: "external control, resource reference, path traversal, file inclusion, SSRF, out-of-sphere, LFI, RFI"
                CWE-552: Files or Directories Accessible to External Parties - The product makes files or directories accessible to unauthorized actors, even though they should not be. - examples: "Web server misconfiguration allowing listing of directories containing sensitive files, Backup files (.bak, .old) left in web-accessible directories, Overly permissive file system ACLs on critical system files." - keywords: "file access, directory access, insecure permissions, information disclosure, unauthorized access, data exposure, web server misconfiguration"
                CWE-209: Generation of Error Message Containing Sensitive Information - The software generates an error message that includes sensitive information about its environment, users, or associated data. - examples: "Displaying full SQL query errors to users, Revealing internal IP addresses or server names in error pages, Exposing stack traces that detail application structure." - keywords: "error message, sensitive information, information disclosure, debugging information, verbose errors, stack trace, configuration details"
                CWE-287: Improper Authentication - When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct. - examples: "Allowing access based on a user-supplied 'isAdmin=true' parameter, Using easily guessable default credentials, Authenticating users solely based on their IP address in a shared network." - keywords: "improper authentication, weak authentication, authentication bypass, no authentication, identity verification, credential management"
                CWE-295: Improper Certificate Validation - The software does not validate, or incorrectly validates, a certificate. - examples: "Accepting self-signed SSL/TLS certificates without warning, Not checking certificate expiration or revocation status, Disabling hostname verification in an HTTPS client." - keywords: "certificate validation, SSL/TLS, man-in-the-middle, insecure communication, trust, HTTPS, PKI, hostname verification"
                CWE-273: Improper Check for Dropped Privileges - The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded. - examples: "Calling setuid() to drop root privileges but not verifying the return code, Continuing execution with elevated privileges after a failed privilege drop attempt, Performing sensitive operations assuming privileges were dropped when they weren't." - keywords: "dropped privileges, privilege escalation, permission check, root access, least privilege, setuid, effective UID"
                CWE-754: Improper Check for Unusual or Exceptional Conditions - The software does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software. - examples: "Ignoring return values from functions that indicate errors, Not handling potential null values before dereferencing, Failing to catch specific exceptions that could lead to application instability." - keywords: "exceptional conditions, error handling, unexpected input, robustness, edge cases, return value check, null check"
                CWE-913: Improper Control of Dynamically-Managed Code Resources - The software does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements. - examples: "Allowing user input to specify class names for instantiation via reflection without validation, Modifying JavaScript prototypes based on URL parameters, Using eval() on untrusted strings that can alter program logic." - keywords: "dynamic code, code modification, reflection, runtime manipulation, insecure code management, eval, prototype pollution"
                CWE-94: Improper Control of Generation of Code ('Code Injection') - The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. - examples: "Using eval() on concatenated strings including user input, Server-side template injection where user input becomes part of the template code, Generating shell commands by embedding unsanitized user data." - keywords: "code injection, eval injection, dynamic code, input sanitization, remote code execution, template injection, command injection"
                CWE-116: Improper Encoding or Escaping of Output - The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved. - examples: "Outputting user-supplied data directly into an HTML page without HTML entity encoding (leading to XSS), Generating JSON with unescaped user input that breaks the JSON structure, Logging user data without sanitizing control characters that could corrupt log parsing." - keywords: "output encoding, output escaping, XSS, injection, data sanitization, context awareness, HTML injection, log injection"
                CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel - The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission. - examples: "Relying on unencrypted HTTP for API communication without message authentication codes (MACs), Downloading software updates over an insecure channel without verifying a digital signature, Not using TLS or using it with weak cipher suites that don't ensure integrity." - keywords: "message integrity, data tampering, man-in-the-middle, checksum, MAC, digital signature, insecure communication, HMAC"
                CWE-178: Improper Handling of Case Sensitivity - The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results. - examples: "Allowing 'admin' and 'Admin' as different usernames but file system is case-insensitive, Checking for 'file.txt' but attacker uploads 'File.TXT' on a case-insensitive OS, Inconsistent case handling in security checks for URLs or parameters." - keywords: "case sensitivity, normalization, canonicalization, resource access, file system, identifier comparison, username enumeration"
                CWE-755: Improper Handling of Exceptional Conditions - The software does not handle or incorrectly handles an exceptional condition. - examples: "A try block with an empty catch block that silently ignores errors, Catching a generic Exception and not taking appropriate action, Allowing an unhandled exception to propagate and crash the application." - keywords: "exception handling, error handling, crash, denial of service, unexpected state, robustness, unhandled exception"
                CWE-665: Improper Initialization - The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used. - examples: "Using a variable before it's assigned a value, A class constructor not initializing all member variables, Forgetting to initialize a security-critical flag to a safe default." - keywords: "improper initialization, uninitialized variable, default values, resource state, unexpected behavior, null pointer, undefined state"
                CWE-20: Improper Input Validation - The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. - examples: "Accepting a negative number for an item quantity, Allowing special characters in a username field that are used in SQL queries, Not checking the type or range of an input parameter before using it in calculations." - keywords: "input validation, data validation, sanitization, untrusted input, security checks, malformed data, type checking, range checking"
                CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') - The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. - examples: "User input like ../../etc/passwd used in a file open operation, A file download script that takes a filename parameter without sanitizing ../, Using user-provided path components directly in filesystem operations." - keywords: "path traversal, directory traversal, dot-dot-slash, file access, input sanitization, LFI, restricted directory bypass"
                CWE-59: Improper Link Resolution Before File Access ('Link Following') - The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource. - examples: "A privileged program writes to a log file in a user-writable directory where the user can replace the log with a symlink to /etc/shadow, Checking permissions on a symlink itself instead of the target file, Race conditions where a file is replaced by a symlink between check and use (TOCTOU)." - keywords: "link following, symbolic link, symlink, TOCTOU, file access, race condition, privilege escalation, file system attack"
                CWE-667: Improper Locking - The software does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors. - examples: "Forgetting to release a mutex after acquiring it, leading to deadlock, Acquiring locks in inconsistent order across different threads causing deadlocks, Using a non-recursive lock in a recursive function." - keywords: "improper locking, synchronization, race condition, deadlock, mutex, semaphore, concurrency, resource contention"
                CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') - The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. - examples: "Passing unsanitized user input as an argument to system() or exec() calls, User input like -o malicious_file.sh being passed to a command-line utility, Failure to quote arguments containing spaces or special characters when building a command string." - keywords: "argument injection, command injection, parameter injection, shell injection, input sanitization, system call, command line arguments"
                CWE-1236: Improper Neutralization of Formula Elements in a CSV File - The software saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by spreadsheet software. - examples: "Exporting user-provided data starting with = (e.g. =SUM(A1:A2)) directly into a CSV, Not prefixing potentially malicious cell values with a single quote, Allowing DDE commands in CSV content." - keywords: "CSV injection, formula injection, spreadsheet, data export, sanitization, command execution, DDE, data exfiltration"
                CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') - The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. - examples: "Echoing user input from a URL parameter directly into HTML, Displaying user comments without escaping HTML tags, Injecting user-provided data into JavaScript string literals without proper escaping." - keywords: "XSS, cross-site scripting, input sanitization, output encoding, web security, javascript injection, HTML injection, DOM XSS, reflected XSS, stored XSS"
                CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') - The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component. - examples: "Generating XML with unescaped user data leading to XML injection, Creating LDAP queries by concatenating unsanitized user input, Building OS commands with user input without proper escaping (leading to OS Command Injection)." - keywords: "injection, generic injection, special elements, sanitization, escaping, output encoding, command injection, SQL injection, LDAP injection, XML injection"
                CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection') - The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component. - examples: "A web script that pings a host provided by user input by building a command string like ping + user_host, Using user input directly in subprocess.call('command ' + arg, shell=True) in Python, Concatenating user data into a batch script." - keywords: "command injection, os command injection, shell injection, input sanitization, arbitrary command execution, system calls, metacharacters"
                CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection') - The software constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. - examples: "Concatenating user input into a JSF EL expression like #{{bean. + userInput + }}, Allowing user-provided data in Spring Expression Language (SpEL) evaluations without sanitization, Server-side template injection where EL is used and input is not escaped." - keywords: "expression language injection, EL injection, template injection, server-side injection, input sanitization, OGNL, SpEL, JSF"
                CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') - The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. - examples: "A CGI script taking a filename from a GET request and passing it to grep unsanitized, Using user input in backticks or $(command) in shell scripts, Passing unsanitized input to functions like os.system() in Python or Runtime.exec() in Java with command concatenation." - keywords: "os command injection, command injection, shell injection, input sanitization, arbitrary command execution, metacharacters, shell metacharacters"
                CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') - The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. - examples: "Building a login query like SELECT * FROM users WHERE username=' + user + ' AND password=' + pass + ', Using user-provided sort order parameter directly in ORDER BY clause, Not using parameterized queries or prepared statements for dynamic SQL." - keywords: "SQL injection, SQLi, database injection, input sanitization, parameterized queries, ORM, dynamic SQL, data exfiltration"
                CWE-281: Improper Preservation of Permissions - The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended. - examples: "A backup utility restoring files with overly permissive default permissions instead of original ones, A file copy operation that doesn't replicate ACLs, Software installation that changes permissions of existing system files insecurely." - keywords: "permissions, access control, file permissions, privilege escalation, insecure defaults, ACLs, umask"
                CWE-269: Improper Privilege Management - The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor. - examples: "Granting admin rights to a user for a temporary task but never revoking them, A process running with root privileges when only needing access to a specific port, Allowing users to assign arbitrary roles to themselves or others." - keywords: "privilege management, access control, authorization, least privilege, privilege escalation, role management, excessive privileges"
                CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer - The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors. - examples: "An application that 'deletes' user data by merely marking it as inactive in the database, Sharing a document that still contains tracked changes or metadata revealing sensitive info, Failing to scrub geolocation data from photos before publishing." - keywords: "data sanitization, sensitive information removal, data scrubbing, information disclosure, redaction, metadata, data remanence"
                CWE-404: Improper Resource Shutdown or Release - The program does not release or incorrectly releases a resource before it is made available for re-use. - examples: "Opening files or network connections in a loop without closing them, Forgetting to call fclose() after fopen(), Not releasing database connections from a connection pool after use." - keywords: "resource leak, resource management, memory leak, file handle leak, connection leak, shutdown, finalization, garbage collection"
                CWE-307: Improper Restriction of Excessive Authentication Attempts - The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks. - examples: "No account lockout mechanism after multiple failed login attempts, No CAPTCHA or rate limiting on the login page, Allowing an unlimited number of password reset attempts." - keywords: "brute force, authentication attempts, account lockout, rate limiting, password guessing, CAPTCHA, credential stuffing"
                CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer - The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. - examples: "Writing past the end of an array (buffer overflow), Reading before the beginning of a buffer (buffer underread), Using an incorrect size in memcpy or memset." - keywords: "buffer overflow, out-of-bounds read, out-of-bounds write, memory corruption, bounds checking, memory safety, heap overflow, stack overflow"
                CWE-920: Improper Restriction of Power Consumption - The software operates in an environment in which power is a limited resource that cannot be automatically replenished, but the software does not properly restrict the amount of power that its operation consumes. - examples: "A mobile app that keeps GPS active unnecessarily draining the battery, An embedded device performing CPU-intensive calculations in a tight loop without sleep, Firmware that doesn't utilize low-power modes effectively." - keywords: "power consumption, battery drain, resource exhaustion, denial of service, embedded systems, IoT, energy efficiency"
                CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') - The software uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities. - examples: "Parsing an XML file with a 'billion laughs' payload (recursive entity definition), An XML parser that doesn't limit entity expansion depth or total size, DTD processing enabled by default without safeguards against entity bombs." - keywords: "XML entity expansion, XXE, billion laughs attack, denial of service, DoS, DTD, XML parsing, resource exhaustion, entity bomb"
                CWE-1021: Improper Restriction of Rendered UI Layers or Frames - The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with. - examples: "A website allowing itself to be embedded in an <iframe> on a malicious site, No use of X-Frame-Options or Content Security Policy frame-ancestors headers, UI redressing where a transparent iframe overlays a legitimate button." - keywords: "clickjacking, UI redressing, frame busting, X-Frame-Options, content security policy, iframe security, visual deception"
                CWE-611: Improper Restriction of XML External Entity Reference - The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. - examples: "An XML parser configured to resolve external entities processing user-supplied XML that references file:///etc/passwd, Using external DTDs from untrusted sources, SSRF via XML external entity resolution." - keywords: "XXE, XML external entity, XML injection, information disclosure, SSRF, file access, data exfiltration, DTD processing"
                CWE-662: Improper Synchronization - The software utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes. - examples: "Multiple threads accessing and modifying a shared list without locks, A 'check-then-act' sequence on a shared variable without atomicity, Incorrect use of volatile keyword expecting it to provide thread safety for complex operations." - keywords: "improper synchronization, race condition, concurrency, threading, shared resource, mutex, critical section, atomicity"
                CWE-129: Improper Validation of Array Index - The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array. - examples: "User-supplied integer used directly as an array index without bounds checking, Calculating an index based on user input that can result in a negative value, Off-by-one error in loop condition leading to out-of-bounds access." - keywords: "array index, out-of-bounds, bounds checking, memory access, input validation, index validation, buffer read/write"
                CWE-354: Improper Validation of Integrity Check Value - The software does not validate or incorrectly validates the integrity check values or "checksums" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission. - examples: "Accepting a software update if the hash matches one from a list downloaded over HTTP (hash could also be tampered), Ignoring a MAC (Message Authentication Code) failure and processing the data anyway, Using a weak checksum algorithm (like CRC32) for security purposes." - keywords: "integrity check, checksum, hash validation, data tampering, message authentication, MAC, digital signature, data corruption"
                CWE-1284: Improper Validation of Specified Quantity in Input - The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties. - examples: "Allocating memory based on a user-provided size without checking for excessively large or negative values, A loop that iterates a user-specified number of times without an upper bound, Reading 'N' bytes from a stream where 'N' is user-controlled and not validated." - keywords: "quantity validation, size validation, length validation, input validation, integer overflow, buffer allocation, resource consumption, denial of service"
                CWE-347: Improper Verification of Cryptographic Signature - The software does not verify, or incorrectly verifies, the cryptographic signature for data. - examples: "Accepting a JWT without checking its signature, Implementing signature verification but using an algorithm specified by the attacker (e.g. 'none' algorithm in JWT), Not checking the certificate chain of the signing key." - keywords: "cryptographic signature, signature verification, data integrity, authentication, non-repudiation, spoofing, JWT, code signing, algorithm confusion"
                CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') - The software receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype. - examples: "A JavaScript merge function that recursively assigns properties allowing __proto__ to be set, Unsafely parsing JSON input that can inject properties into Object.prototype, A query parameter parser that allows arbitrary nested object creation leading to prototype modification." - keywords: "prototype pollution, javascript, object prototype, attribute modification, RCE, denial of service, insecure merge, object injection"
                CWE-326: Inadequate Encryption Strength - The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. - examples: "Using DES for encrypting sensitive financial data, Employing RSA with a 512-bit key for long-term data protection, Using a custom encryption algorithm that has not been publicly vetted." - keywords: "weak encryption, encryption strength, cryptography, brute force, key length, outdated algorithm, DES, short keys, custom crypto"
                CWE-838: Inappropriate Encoding for Output Context - The software uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component. - examples: "Generating UTF-8 data but sending an HTTP header specifying Content-Type: text/plain; charset=ISO-8859-1, Storing data in one encoding and retrieving it assuming another, leading to mojibake, Inconsistent encoding in different parts of a multipart message." - keywords: "encoding mismatch, output encoding, character encoding, data corruption, mojibake, XSS, unicode, UTF-8, ISO-8859-1"
                CWE-829: Inclusion of Functionality from Untrusted Control Sphere - The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere. - examples: "PHP include() or require() using a URL parameter: include($_GET['page']), Loading a Python module from a user-writable directory, Using Java ClassLoader.loadClass() with a class name from untrusted input." - keywords: "untrusted include, remote file inclusion, RFI, local file inclusion, LFI, code injection, supply chain, dynamic loading"
                CWE-459: Incomplete Cleanup - The software does not properly "clean up" and remove temporary or supporting resources after they have been used. - examples: "Creating temporary files with sensitive data in /tmp but not deleting them on application exit or error, Leaving debug flags or backdoor accounts active in production code, Not clearing sensitive data from memory after processing." - keywords: "incomplete cleanup, temporary files, resource leak, information disclosure, data remanence, leftover debug code"
                CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling') - The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination. - examples: "A front-end proxy uses Content-Length while the back-end server uses Transfer-Encoding: chunked for request delimitation, Exploiting differences in how two HTTP servers parse ambiguous Content-Length headers, Using CL.TE or TE.CL vulnerabilities to desynchronize requests." - keywords: "HTTP request smuggling, HTTP response smuggling, request desynchronization, proxy, firewall, bypass, CL.TE, TE.CL, HTTP parsing"
                CWE-863: Incorrect Authorization - The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions. - examples: "Checking user.role == 'admin' but the actual role is stored in user.permissions.isAdmin, Allowing access if any one of multiple cumulative permission checks passes, when all should be required, Incorrectly implementing 'deny by default' logic." - keywords: "incorrect authorization, access control, authorization bypass, privilege escalation, permission flaw, logical error in checks"
                CWE-682: Incorrect Calculation - The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management. - examples: "A financial application miscalculates interest due to floating-point precision errors, An off-by-one error in calculating buffer sizes leading to overflow, Incorrectly calculating remaining attempts for login causing premature lockout or no lockout." - keywords: "incorrect calculation, logic error, arithmetic error, precision error, financial miscalculation, security decision, off-by-one, rounding error"
                CWE-131: Incorrect Calculation of Buffer Size - The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow. - examples: "Forgetting to add +1 for null terminator when allocating for a string, Using sizeof(pointer) instead of sizeof(pointee_type) or string length for malloc, Integer overflow in size calculation width * height before allocation." - keywords: "buffer size calculation, buffer overflow, memory allocation, off-by-one, integer overflow, malloc, sizeof error, null terminator"
                CWE-697: Incorrect Comparison - The software compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses. - examples: "Comparing signed and unsigned integers where a negative signed value becomes a large unsigned value, Using == to compare floating point numbers for equality, Incorrectly comparing user roles, e.g. if (role != "admin") instead of checking for specific allowed roles." - keywords: "incorrect comparison, logic error, type mismatch, string comparison, equality check, authentication bypass, signed/unsigned comparison"
                CWE-681: Incorrect Conversion between Numeric Types - When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur. - examples: "Casting a long to int losing significant bits, potentially making a large positive number small or negative, Converting a floating-point number to an integer via truncation where precision is critical, Implicit conversion from signed to unsigned leading to unexpected behavior with negative numbers." - keywords: "numeric type conversion, integer overflow, truncation, data loss, type casting, precision error, sign extension, implicit conversion"
                CWE-276: Incorrect Default Permissions - During installation, installed file permissions are set to allow anyone to modify those files. - examples: "Software installer setting configuration files to be world-writable (777), Default umask being too permissive (e.g., 0000), Application data directories created with global read/write access." - keywords: "incorrect default permissions, insecure defaults, file permissions, access control, privilege escalation, umask, world-writable"
                CWE-732: Incorrect Permission Assignment for Critical Resource - The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors. - examples: "A /etc/shadow file being readable by non-root users, Admin panel accessible by regular users due to misconfigured web server rules, Database granting UPDATE privileges on sensitive tables to low-privilege application accounts." - keywords: "incorrect permissions, critical resource, access control, information disclosure, privilege escalation, ACLs, file system permissions"
                CWE-669: Incorrect Resource Transfer Between Spheres - The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource. - examples: "A privileged process passing a file descriptor to an unprivileged process without proper sanitization of its capabilities, A web application reflecting user input into a system command executed in a more privileged context, Exposing internal object references to a less trusted environment." - keywords: "resource transfer, sphere boundary, control sphere, cross-domain, privilege escalation, capability passing, context switching"
                CWE-704: Incorrect Type Conversion or Cast - The software does not correctly convert an object, resource, or structure from one type to a different type. - examples: "Casting a void* to an incorrect struct type and accessing its members, Downcasting a base class pointer to a derived class pointer when the object is not actually of the derived type, Implicit type conversion in C/C++ that leads to data loss or misinterpretation." - keywords: "type conversion, type casting, data corruption, type confusion, unexpected behavior, downcast, reinterpret_cast"
                CWE-335: Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG) - The software uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds. - examples: "Seeding a PRNG with a constant value (e.g., srand(0)), Seeding with time(NULL) which can be predictable if calls are close together, Re-seeding the PRNG too frequently with low-entropy sources." - keywords: "PRNG seed, random number generator, predictability, weak entropy, static seed, insufficient randomness, srand, time()"
                CWE-407: Inefficient Algorithmic Complexity - An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached. - examples: "Using a nested loop algorithm (O(n^2)) where a linear solution (O(n)) exists for processing user-supplied data, A string matching algorithm that degrades to quadratic complexity on specific inputs, Hash table with poor collision resolution leading to linear search times." - keywords: "algorithmic complexity, denial of service, DoS, performance, resource exhaustion, inefficient algorithm, O(n^2), worst-case scenario"
                CWE-1333: Inefficient Regular Expression Complexity - The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles. - examples: "Regex like (a+)+b which can cause catastrophic backtracking, Using nested quantifiers with overlapping patterns, A regex that performs poorly on strings with many near misses." - keywords: "regex DoS, ReDoS, regular expression, catastrophic backtracking, denial of service, CPU exhaustion, inefficient regex, performance"
                CWE-1188: Insecure Default Initialization of Resource - The software initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure. - examples: "Default admin password like 'admin' or 'password', SNMP community string set to 'public' by default, A firewall product having a default 'allow all' rule." - keywords: "insecure defaults, default credentials, weak configuration, initialization, security misconfiguration, hardcoded password"
                CWE-922: Insecure Storage of Sensitive Information - The software stores sensitive information without properly limiting read or write access by unauthorized actors. - examples: "Storing API keys in a world-readable file, Database backups containing PII stored in an S3 bucket with public access, User session data written to a shared temporary directory with insecure permissions." - keywords: "insecure storage, sensitive data, data exposure, access control, encryption, cleartext storage, permissions, PII"
                CWE-532: Insertion of Sensitive Information into Log File - Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information. - examples: "Logging full HTTP requests including session cookies or authorization headers, Writing raw exception details that include user passwords or PII, Debug logs that output decrypted sensitive data." - keywords: "sensitive data in logs, log injection, information disclosure, passwords in logs, PII, session tokens in logs, credit card numbers in logs"
                CWE-331: Insufficient Entropy - The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others. - examples: "Generating session IDs using a PRNG seeded with only the current time (low resolution), Creating cryptographic keys from a small set of easily guessable inputs, Using rand() for security-critical random numbers without proper seeding from /dev/urandom." - keywords: "insufficient entropy, weak randomness, PRNG, predictability, cryptographic weakness, random number generation, /dev/random, CSPRNG"
                NVD-CWE-noinfo: Insufficient Information - There is insufficient information about the issue to classify it; details are unkown or unspecified. - examples: "Vulnerability report states 'a security issue' without technical details, Advisory mentions a flaw but vendor has not disclosed specifics, CVE entry marked with this when details are pending." - keywords: "insufficient information, unclassified, unknown weakness, unspecified, nvd, pending details, undisclosed"
                NVD-CWE-Other: Other - NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset. - examples: "A very specific or niche vulnerability not fitting existing CWEs used by NVD, A weakness category that NVD has chosen not to map directly, A complex issue spanning multiple unmapped CWEs." - keywords: "other, non-standard, uncategorized, miscellaneous weakness, nvd, mapping limitation, unique flaw"
                CWE-613: Insufficient Session Expiration - According to WASC, "Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization." - examples: "Session cookies that never expire or have extremely long lifetimes (e.g., years), Not invalidating a session on the server-side after logout, Re-authenticating a user without issuing a new session ID if the old one is still active." - keywords: "session expiration, session management, session hijacking, timeout, stale session, persistent session, logout functionality"
                CWE-345: Insufficient Verification of Data Authenticity - The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data. - examples: "Accepting firmware updates without checking digital signatures, Trusting data from a DNS server without DNSSEC, Processing messages from a queue without verifying the sender's identity or message integrity." - keywords: "data authenticity, data integrity, spoofing, tampering, signature validation, source validation, message origin, non-repudiation"
                CWE-522: Insufficiently Protected Credentials - The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval. - examples: "Storing passwords using unsalted MD5 hashes, Transmitting passwords in cleartext over HTTP, Hardcoding API keys directly in client-side JavaScript." - keywords: "protected credentials, password storage, credential exposure, cleartext passwords, weak hashing, insecure transmission, unsalted hash, hardcoded secrets"
                CWE-190: Integer Overflow or Wraparound - The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. - examples: "Calculating malloc size with count * item_size where the product overflows to a small number, A loop counter i++ wraps around from max_int to a negative value, A security check if (value + offset < limit) where value + offset overflows." - keywords: "integer overflow, wraparound, arithmetic overflow, buffer overflow, memory allocation, security checks, numeric calculation, signedness"
                CWE-191: Integer Underflow (Wrap or Wraparound) - The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. - examples: "Calculating buffer offset ptr - size where size is larger than ptr's numeric value (if ptr is an int), A check if (balance - withdrawal_amount >= 0) where balance - withdrawal_amount underflows to a large positive number, Decrementing an unsigned integer below zero." - keywords: "integer underflow, wraparound, arithmetic underflow, security checks, negative values, numeric calculation, buffer offset"
                CWE-436: Interpretation Conflict - Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state. - examples: "A web proxy and backend server parsing HTTP headers (e.g., Content-Length) differently leading to request smuggling, Different interpretation of character encodings between two systems, Inconsistent handling of ambiguous file path separators (/ vs \) by different components." - keywords: "interpretation conflict, protocol mismatch, state inconsistency, system interaction, interoperability, ambiguity, request smuggling, parsing differences"
                CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop') - The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop. - examples: "A while(true) loop without a break statement or other exit mechanism, A for loop where the increment/decrement operation never allows the condition to be met (e.g., for(i=0; i!=10; i+=2) if i starts odd), A loop condition dependent on a variable that is never modified within the loop body." - keywords: "infinite loop, unreachable exit, denial of service, DoS, resource exhaustion, loop control, hang, non-termination"
                CWE-306: Missing Authentication for Critical Function - The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. - examples: "An admin panel accessible without login, An API endpoint for deleting user accounts that does not require a session token, A feature to change system configuration available to any network user." - keywords: "missing authentication, no authentication, critical function, access control, unauthorized access, unauthenticated access, public function"
                CWE-862: Missing Authorization - The software does not perform an authorization check when an actor attempts to access a resource or perform an action. - examples: "Any authenticated user can access /admin/delete_user?id=xxx regardless of their role, A user can view another user's private messages by guessing the message ID, No check to ensure a user owns a resource before allowing modification." - keywords: "missing authorization, no authorization, access control, privilege escalation, insecure direct object reference, IDOR, permission check"
                CWE-311: Missing Encryption of Sensitive Data - The software does not encrypt sensitive or critical information before storage or transmission. - examples: "Storing credit card numbers in a database without encryption, Transmitting user passwords over HTTP, Sending PII via unencrypted email." - keywords: "missing encryption, unencrypted data, cleartext, sensitive data exposure, confidentiality, PII, data in transit, data at rest"
                CWE-909: Missing Initialization of Resource - The software does not initialize a critical resource. - examples: "A pointer is declared but not assigned before being dereferenced, A security flag (e.g., is_admin) is not set to a default safe value before use, Using a file descriptor that has not been opened." - keywords: "missing initialization, uninitialized resource, default values, unexpected state, null pointer, undefined behavior, uninitialized variable"
                CWE-401: Missing Release of Memory after Effective Lifetime - The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. - examples: "Calling malloc repeatedly in a loop without corresponding free calls, An object that allocates memory in its constructor but has no destructor or dispose method to release it, Creating data structures (e.g., list nodes) and losing pointers to them before deallocation." - keywords: "memory leak, resource leak, memory management, garbage collection, denial of service, malloc/free, new/delete"
                CWE-772: Missing Release of Resource after Effective Lifetime - The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed. - examples: "Opening files without closing them (fopen without fclose), Acquiring database connections from a pool and not returning them, Not releasing network sockets after communication ends." - keywords: "resource leak, file handle leak, connection leak, memory leak, resource management, close(), release()"
                CWE-476: NULL Pointer Dereference - A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. - examples: "Accessing ptr->member when ptr is NULL, A function returns NULL on error but the caller uses the return value without checking, Using an object pointer before it's properly constructed and initialized." - keywords: "null pointer dereference, crash, segmentation fault, null check, pointer access, NPE, invalid memory access"
                CWE-203: Observable Discrepancy - The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not. - examples: "Login page responds faster for invalid usernames than for valid usernames with incorrect passwords (timing attack), Different error messages for 'user not found' vs 'incorrect password', API returning more detailed error for one failure type over another." - keywords: "observable discrepancy, timing attack, side channel, information disclosure, error messages, user enumeration, behavioral difference"
                CWE-193: Off-by-one Error - A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value. - examples: "Looping for (i=0; i <= size; i++) when accessing array[i] (should be < size), Allocating strlen(str) bytes for a string copy instead of strlen(str)+1 for the null terminator, Using < instead of <= (or vice-versa) in a boundary condition check." - keywords: "off-by-one, boundary error, buffer overflow, loop termination, array indexing, fencepost error, +/-1 error"
                CWE-672: Operation on a Resource after Expiration or Release - The software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked. - examples: "Using a file descriptor after the file has been closed (close(fd); write(fd, ...)), Accessing an object after its memory has been free()d (Use-After-Free), Continuing to use a session ID after the session has been invalidated on the server." - keywords: "use after free, UAF, operation on released resource, dangling pointer, stale reference, resource lifetime, session invalidation"
                CWE-346: Origin Validation Error - The software does not properly verify that the source of data or communication is valid. - examples: "A web application accepting cross-domain requests (CORS) from * without proper checks, A WebSocket server not verifying the Origin header of incoming connections, An IPC mechanism trusting any local process without sender verification." - keywords: "origin validation, CORS misconfiguration, cross-domain, source verification, trust boundary, Origin header, CSRF"
                CWE-125: Out-of-bounds Read - The software reads data past the end, or before the beginning, of the intended buffer. - examples: "Reading buffer[length] when length is the size of the buffer (valid indices are 0 to length-1), Using a negative index to access an array, A memcpy or similar function reading more bytes than available in the source buffer." - keywords: "out-of-bounds read, OOB read, buffer over-read, memory disclosure, information leak, bounds checking, Heartbleed"
                CWE-787: Out-of-bounds Write - The software writes data past the end, or before the beginning, of the intended buffer. - examples: "Writing to buffer[length] when length is the size of the buffer, strcpy to a buffer that is too small for the source string, Integer overflow in index calculation leading to writing outside allocated memory." - keywords: "out-of-bounds write, OOB write, buffer overflow, memory corruption, code execution, bounds checking, heap overflow, stack overflow"
                CWE-617: Reachable Assertion - The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. - examples: "An assert(user_input != NULL) that crashes if user_input is NULL, An assertion checking an invariant that can be violated by crafted input, Using assertions for input validation in production builds where assertions are compiled out or cause termination." - keywords: "reachable assertion, assert, denial of service, DoS, crash, input validation, defensive programming, unhandled condition"
                CWE-763: Release of Invalid Pointer or Reference - The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly. - examples: "Calling free() on a pointer not obtained from malloc() (e.g., stack variable, global), Calling delete on a pointer allocated with malloc(), or free() on new, Using free() on an already freed pointer if not a double-free (e.g. if it was reallocated by something else)." - keywords: "invalid free, release invalid pointer, memory corruption, crash, free(), delete, memory management, heap corruption"
                CWE-565: Reliance on Cookies without Validation and Integrity Checking - The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user. - examples: "Storing user role (e.g., isAdmin=true) in a client-side cookie without server-side verification or signing, Using a cookie value directly in an SQL query without sanitization, Trusting a cookie to indicate authentication status without re-validating against a server session." - keywords: "cookie manipulation, insecure cookie, session management, authentication bypass, authorization bypass, client-side trust, signed cookies, HttpOnly"
                CWE-918: Server-Side Request Forgery (SSRF) - The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. - examples: "A feature to fetch an image from a user-provided URL which can be pointed to internal services like http://127.0.0.1/admin, A PDF generator that loads content from URLs specified in an XML/HTML input, Cloud metadata service abuse by providing URLs like http://169.254.169.254/." - keywords: "SSRF, server-side request forgery, URL fetching, internal network access, port scanning, cloud metadata abuse, input validation, allowlist/denylist"
                CWE-384: Session Fixation - Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. - examples: "User logs in, but the application continues to use the pre-login session ID, Attacker tricks victim into using a session ID known to the attacker, then waits for victim to log in, Not regenerating session ID upon successful authentication." - keywords: "session fixation, session hijacking, session management, authentication, session ID regeneration, pre-login session"
                CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition - The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. - examples: "Checking if a file exists (check_file) then opening it (open_file), but the file is replaced by a symlink in between, Validating user permissions then performing an action, but permissions change before action execution, Checking available balance then debiting an account without an atomic transaction." - keywords: "TOCTOU, time-of-check time-of-use, race condition, concurrency, file system race, atomicity, locking"
                CWE-252: Unchecked Return Value - The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. - examples: "Ignoring the return value of malloc() which could be NULL, Not checking if fwrite() successfully wrote all bytes, Calling a function that can fail (e.g., network send) without verifying its success status." - keywords: "unchecked return value, error handling, ignored error, robustness, unexpected state, function result, status code"
                CWE-674: Uncontrolled Recursion - The product does not properly control the amount of recursion which takes place, consuming excessive resources, such as allocated memory or the program stack. - examples: "A recursive function to parse a data structure (e.g., JSON) without a depth limit, A factorial function that can be called with a very large number from user input, Mutually recursive functions where the base case is not reached or is controlled by external input." - keywords: "uncontrolled recursion, stack overflow, denial of service, DoS, recursion depth, base case, resource exhaustion"
                CWE-400: Uncontrolled Resource Consumption - The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. - examples: "Allowing a user to request an arbitrarily large file for processing, A regex that takes exponential time on certain inputs (ReDoS), Allocating memory based on a user-provided size without limits, leading to DoS." - keywords: "uncontrolled resource consumption, denial of service, DoS, resource exhaustion, memory allocation, CPU usage, rate limiting, input validation"
                CWE-427: Uncontrolled Search Path Element - The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. - examples: "An application that loads DLLs from the current working directory first, where an attacker can place a malicious DLL, Using . in the PATH environment variable on Unix, A script that includes files using a path that includes a user-writable directory." - keywords: "uncontrolled search path, DLL hijacking, path manipulation, library loading, current working directory, environment variable"
                CWE-428: Unquoted Search Path or Element - The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path. - examples: "A Windows service registered with an unquoted path like C:\\Program Files\\My App\\service.exe allowing C:\\Program.exe to be executed, A script that calls an executable using an unquoted path with spaces, Configuration files specifying paths without quotes." - keywords: "unquoted search path, path injection, Windows service, whitespace in path, privilege escalation, command execution"
                CWE-434: Unrestricted Upload of File with Dangerous Type - The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment. - examples: "Allowing users to upload .php or .jsp files to a web server's document root, Uploading an .exe file to a directory from which applications are run, Not validating file extensions or MIME types for uploaded files that could be executable." - keywords: "unrestricted file upload, dangerous file type, code execution, web shell, file validation, MIME type, extension check"
                CWE-426: Untrusted Search Path - The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. - examples: "A program using an environment variable like LD_LIBRARY_PATH or PYTHONPATH set by a user to find libraries, An application that loads plugins from a directory specified in a user-modifiable configuration file, Scripts that source other scripts from paths influenced by user input." - keywords: "untrusted search path, DLL hijacking, library loading, environment variable, path manipulation, code execution, RPATH"
                CWE-601: URL Redirection to Untrusted Site ('Open Redirect') - A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks. - examples: "A login page redirects to $_GET['redirect_url'] without validating the URL is on the same domain, A link shortener that doesn't check if the target URL is malicious, Using user-provided URLs in HTTP Location headers without proper validation." - keywords: "open redirect, URL redirection, phishing, untrusted site, input validation, allowlist, Location header"
                CWE-416: Use After Free - Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. - examples: "An object is deleted, but a pointer to it is still used later, A data structure element is freed, but iterators or other references to it are not updated, Using a pointer that was passed to free() in an error handling path that doesn't immediately exit." - keywords: "use after free, UAF, dangling pointer, memory corruption, crash, remote code execution, heap exploitation"
                CWE-327: Use of a Broken or Risky Cryptographic Algorithm - The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. - examples: "Using MD5 or SHA1 for password hashing, Employing DES or RC4 for data encryption, Relying on custom-made 'homegrown' cryptographic algorithms." - keywords: "broken crypto, risky crypto, weak algorithm, MD5, SHA1, DES, RC4, outdated cryptography, insecure algorithm"
                CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) - The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong. - examples: "Using java.util.Random or Python's random module to generate session IDs or encryption keys, Relying on rand() or libc PRNGs for cryptographic purposes, PRNGs with small internal state or predictable output sequences." - keywords: "weak PRNG, cryptographically weak PRNG, CSPRNG, rand(), java.util.Random, predictability, insufficient randomness, security context"
                CWE-134: Use of Externally-Controlled Format String - The software uses a function that accepts a format string as an argument, but the format string originates from an external source. - examples: "Calling printf(user_input) instead of printf('%s', user_input), Using user-controlled data as the first argument to syslog(), sprintf(), or fprintf(), A logging function that takes a format string directly from a network request." - keywords: "format string vulnerability, format string bug, printf, sprintf, memory corruption, information disclosure, code execution, %n"
                CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') - The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code. - examples: "Java Class.forName(userInput).newInstance() where userInput comes from an HTTP parameter, Python getattr(module, user_string)() to call functions, Deserializing objects where the class name is controlled by the attacker." - keywords: "unsafe reflection, code execution, class loading, dynamic invocation, input validation, Class.forName, getattr, deserialization"
                CWE-798: Use of Hard-coded Credentials - The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. - examples: "Default admin password compiled into the application binary, Database connection string with username/password stored in source code, A fixed AES encryption key embedded in a mobile app." - keywords: "hard-coded credentials, hardcoded password, embedded key, secret in code, backdoor, insecure default"
                CWE-706: Use of Incorrectly-Resolved Name or Reference - The software uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere. - examples: "DNS rebinding attacks where a malicious site resolves to an internal IP after an initial check, TOCTOU issues with filename resolution where a symlink is introduced, Relying on hostname resolution that can be manipulated by a local attacker (e.g., /etc/hosts)." - keywords: "incorrect name resolution, DNS rebinding, TOCTOU, symlink attack, reference misresolution, control sphere bypass"
                CWE-330: Use of Insufficiently Random Values - The software uses insufficiently random numbers or values in a security context that depends on unpredictable numbers. - examples: "Generating password reset tokens that are easily guessable (e.g., sequential or based on timestamp), Using a PRNG with a small seed space for cryptographic keys, Session IDs that follow a predictable pattern." - keywords: "insufficient randomness, predictability, weak PRNG, entropy, guessable tokens, cryptographic weakness, session ID generation"
                CWE-916: Use of Password Hash With Insufficient Computational Effort - The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive. - examples: "Using unsalted MD5 or SHA1 for password storage, Using bcrypt or scrypt with a very low work factor/iteration count, Custom hashing schemes that are fast to compute." - keywords: "weak password hashing, insufficient effort, bcrypt, scrypt, PBKDF2, Argon2, password cracking, salt, work factor, iteration count, MD5, SHA1"
                CWE-908: Use of Uninitialized Resource - The software uses or accesses a resource that has not been initialized. - examples: "Reading from a variable before any value is assigned to it (common in C/C++), Using an object whose constructor was not called or failed, Dereferencing a pointer member of a struct that was malloced but not initialized." - keywords: "uninitialized resource, uninitialized variable, use before initialization, undefined behavior, garbage value, null pointer, default state"
                CWE-640: Weak Password Recovery Mechanism for Forgotten Password - The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak. - examples: "Password reset based on easily guessable security questions (e.g., 'What is your favorite color?'), Sending new passwords in cleartext via email, Generating predictable password reset tokens." - keywords: "weak password recovery, forgotten password, security questions, reset token, account takeover, insecure mechanism, predictable token"
                CWE-521: Weak Password Requirements - The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts. - examples: "Allowing passwords like '123456' or 'password', Not enforcing minimum length or complexity (mix of character types), No check against common password lists." - keywords: "weak password requirements, password policy, password strength, brute force, dictionary attack, password complexity, minimum length"
                CWE-91: XML Injection (aka Blind XPath Injection) - The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system. - examples: "Concatenating user input directly into an XPath query string, Building XML documents by string concatenation with unescaped user data, A SOAP service that parses XML containing malicious external entity references (XXE if parser supports it)." - keywords: "XML injection, XPath injection, XML parsing, data manipulation, XXE, SOAP injection, input sanitization, special characters"

                Rules for returning the vendor:
                - Return only the official/primary vendor name
                - For open source projects, return the organization maintaining it
                - If multiple vendors are mentioned, return the one responsible for the vulnerable component
                - Normalize variations of the same vendor name
                - If no clear vendor is found, return "Unknown"
                - Use official vendor names where possible and keep the same name for vulnerabilities of the same vendor

                Format your response as follows:
                CWE ID: <CWE-ID number only>
                Explanation: <brief explanation of the vulnerability>
                Vendor: <vendor name>
                Cause: <cause of the vulnerability>
                Impact: <impact of the vulnerability>
                """
            try:
                local_prompt ="{local_prompt}\)"
                tokenizer = AutoTokenizer.from_pretrained(model)
                
                if(config):
                    pairs = config.split(',')

                    # Converter cada par chave=valor em um dicionário
                    config_dict = {}
                    for pair in pairs:
                        key, value = pair.split('=')
                        config_dict[key] = value
                    model = AutoModelForCausalLM.from_pretrained(model,**config_dict)
                else:
                    model = AutoModelForCausalLM.from_pretrained(model)
                
                messages=[{"role": "user", "content": local_prompt}]
                formatted_prompt = tokenizer.apply_chat_template(messages, tokenize=False)

                pipe = pipeline("text-generation", model= model, tokenizer = tokenizer, max_new_tokens=250)
                #print(pipe(formatted_prompt)[0]["generated_text"])
                raw_output = pipe(formatted_prompt)[0]["generated_text"]
                result = extract_assistant_response(raw_output, local_prompt)
                #print(result)

                return [result]
            except Exception as e:
                print(f"Error calling local: {e}")
                return [{"cwe_category": "UNKNOWN", "explanation": str(e), "vendor": "Unknown", "cause": "", "impact": ""}]
            
            except Exception as e:
                print(f"Error calling local: {e}")
                return [{"cwe_category": "UNKNOWN", "explanation": str(e), "vendor": "Unknown", "cause": "", "impact": ""}]

    
